
apiVersion: netop-manager-cntrlr.netop-manager.io/v1
kind: Installer
metadata:
  namespace: netop-manager-system
  name: sample-installer
spec:
  config:
    networkFunctions:
      cko-cni:
        version: "5.2.3.2"
        type: "cko-cni-aci"
        options:
          aci-cni: 
      cko-monitoring:
        version: '0.1'
        type: cko-m-prometheus
        options:
          prometheus-config: 
          prometheus-node-exporter: YXBpVmVyc2lvbjogYXBwcy92MQpraW5kOiBEYWVtb25TZXQKbWV0YWRhdGE6CiAgbGFiZWxzOgogICAgYXBwLmt1YmVybmV0ZXMuaW8vY29tcG9uZW50OiBleHBvcnRlcgogICAgYXBwLmt1YmVybmV0ZXMuaW8vbmFtZTogbm9kZS1leHBvcnRlcgogIG5hbWU6IG5vZGUtZXhwb3J0ZXIKICBuYW1lc3BhY2U6IG1vbml0b3JpbmcKc3BlYzoKICBzZWxlY3RvcjoKICAgIG1hdGNoTGFiZWxzOgogICAgICBhcHAua3ViZXJuZXRlcy5pby9jb21wb25lbnQ6IGV4cG9ydGVyCiAgICAgIGFwcC5rdWJlcm5ldGVzLmlvL25hbWU6IG5vZGUtZXhwb3J0ZXIKICB0ZW1wbGF0ZToKICAgIG1ldGFkYXRhOgogICAgICBsYWJlbHM6CiAgICAgICAgYXBwLmt1YmVybmV0ZXMuaW8vY29tcG9uZW50OiBleHBvcnRlcgogICAgICAgIGFwcC5rdWJlcm5ldGVzLmlvL25hbWU6IG5vZGUtZXhwb3J0ZXIKICAgIHNwZWM6CiAgICAgIGNvbnRhaW5lcnM6CiAgICAgIC0gYXJnczoKICAgICAgICAtIC0tcGF0aC5zeXNmcz0vaG9zdC9zeXMKICAgICAgICAtIC0tcGF0aC5yb290ZnM9L2hvc3Qvcm9vdAogICAgICAgIC0gLS1uby1jb2xsZWN0b3Iud2lmaQogICAgICAgIC0gLS1uby1jb2xsZWN0b3IuaHdtb24KICAgICAgICAtIC0tY29sbGVjdG9yLmZpbGVzeXN0ZW0uaWdub3JlZC1tb3VudC1wb2ludHM9Xi8oZGV2fHByb2N8c3lzfHZhci9saWIvZG9ja2VyLy4rfHZhci9saWIva3ViZWxldC9wb2RzLy4rKSgkfC8pCiAgICAgICAgLSAtLWNvbGxlY3Rvci5uZXRjbGFzcy5pZ25vcmVkLWRldmljZXM9Xih2ZXRoLiopJAogICAgICAgIG5hbWU6IG5vZGUtZXhwb3J0ZXIKICAgICAgICBpbWFnZTogcXVheS5pby9wcm9tZXRoZXVzL25vZGUtZXhwb3J0ZXIKICAgICAgICBwb3J0czoKICAgICAgICAgIC0gY29udGFpbmVyUG9ydDogOTEwMAogICAgICAgICAgICBwcm90b2NvbDogVENQCiAgICAgICAgcmVzb3VyY2VzOgogICAgICAgICAgbGltaXRzOgogICAgICAgICAgICBjcHU6IDI1MG0KICAgICAgICAgICAgbWVtb3J5OiAxODBNaQogICAgICAgICAgcmVxdWVzdHM6CiAgICAgICAgICAgIGNwdTogMTAybQogICAgICAgICAgICBtZW1vcnk6IDE4ME1pCiAgICAgICAgdm9sdW1lTW91bnRzOgogICAgICAgIC0gbW91bnRQYXRoOiAvaG9zdC9zeXMKICAgICAgICAgIG1vdW50UHJvcGFnYXRpb246IEhvc3RUb0NvbnRhaW5lcgogICAgICAgICAgbmFtZTogc3lzCiAgICAgICAgICByZWFkT25seTogdHJ1ZQogICAgICAgIC0gbW91bnRQYXRoOiAvaG9zdC9yb290CiAgICAgICAgICBtb3VudFByb3BhZ2F0aW9uOiBIb3N0VG9Db250YWluZXIKICAgICAgICAgIG5hbWU6IHJvb3QKICAgICAgICAgIHJlYWRPbmx5OiB0cnVlCiAgICAgIHZvbHVtZXM6CiAgICAgIC0gaG9zdFBhdGg6CiAgICAgICAgICBwYXRoOiAvc3lzCiAgICAgICAgbmFtZTogc3lzCiAgICAgIC0gaG9zdFBhdGg6CiAgICAgICAgICBwYXRoOiAvCiAgICAgICAgbmFtZTogcm9vdAotLS0Ka2luZDogU2VydmljZQphcGlWZXJzaW9uOiB2MQptZXRhZGF0YToKICBuYW1lOiBub2RlLWV4cG9ydGVyCiAgbmFtZXNwYWNlOiBtb25pdG9yaW5nCiAgYW5ub3RhdGlvbnM6CiAgICAgIHByb21ldGhldXMuaW8vc2NyYXBlOiAndHJ1ZScKICAgICAgcHJvbWV0aGV1cy5pby9wb3J0OiAgICc5MTAwJwpzcGVjOgogIHNlbGVjdG9yOgogICAgICBhcHAua3ViZXJuZXRlcy5pby9jb21wb25lbnQ6IGV4cG9ydGVyCiAgICAgIGFwcC5rdWJlcm5ldGVzLmlvL25hbWU6IG5vZGUtZXhwb3J0ZXIKICBwb3J0czoKICAtIG5hbWU6IG5vZGUtZXhwb3J0ZXIKICAgIHByb3RvY29sOiBUQ1AKICAgIHBvcnQ6IDkxMDAKICAgIHRhcmdldFBvcnQ6IDkxMDA=
