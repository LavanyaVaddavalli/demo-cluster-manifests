
apiVersion: controller.netop-manager.io/v1alpha1
kind: Installer
metadata:
  name: installer-aci-cni
spec:
  operatorConfigs:
    networking:
      cko-cni:
        version: "5.2.3.4"
        type: "aci-cni"
        managedComponent: true
        
        options:
          aci-cni-specs: apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: acicontainersoperators.aci.ctrl
spec:
  group: aci.ctrl
  names:
    kind: AciContainersOperator
    listKind: AciContainersOperatorList
    plural: acicontainersoperators
    singular: acicontainersoperator
  scope: Namespaced
  versions:
  - name: v1alpha1
    served: true
    storage: true
    subresources:
      status: {}
    schema:
      openAPIV3Schema:
        description: acicontainersoperator owns the lifecycle of ACI objects in the cluster
        properties:
          apiVersion:
            type: string
          kind:
            type: string
          metadata:
            type: object
          spec:
            description: AciContainersOperatorSpec defines the desired spec for ACI Objects
            properties:
              flavor:
                type: string
              config:
                type: string
            type: object
          status:
            description: AciContainersOperatorStatus defines the successful completion of AciContainersOperator
            properties:
              status:
                type: boolean
            type: object
        required:
        - spec
        type: object
---
apiVersion: v1
kind: Namespace
metadata:
  name: aci-containers-system
  labels:
    aci-containers-config-version: "65a61686-a03e-4105-adfd-8a59a3aeb800"
    network-plugin: aci-containers
    openshift.io/run-level: "0"
  annotations:
    openshift.io/node-selector: ''
---
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: acicni-priority
value: 1000000000
globalDefault: false
description: "This priority class is used for ACI-CNI resources"
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: nodepodifs.aci.aw
spec:
  group: aci.aw
  names:
    kind: NodePodIF
    listKind: NodePodIFList
    plural: nodepodifs
    singular: nodepodif
  scope: Namespaced
  versions:
  - name: v1
    served: true
    storage: true
    schema:
      openAPIV3Schema:
        properties:
          apiVersion:
            type: string
          kind:
            type: string
          metadata:
            type: object
          spec:
            type: object
            properties:
              podifs:
                type: array
                items:
                  type: object
                  properties:
                    containerID:
                      type: string
                    epg:
                      type: string
                    ifname:
                      type: string
                    ipaddr:
                      type: string
                    macaddr:
                      type: string
                    podname:
                      type: string
                    podns:
                      type: string
                    vtep:
                      type: string
        required:
        - spec
        type: object
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: snatglobalinfos.aci.snat
spec:
  group: aci.snat
  names:
    kind: SnatGlobalInfo
    listKind: SnatGlobalInfoList
    plural: snatglobalinfos
    singular: snatglobalinfo
  scope: Namespaced
  versions:
  - name: v1
    served: true
    storage: true
    schema:
      openAPIV3Schema:
        description: SnatGlobalInfo is the Schema for the snatglobalinfos API
        properties:
          apiVersion:
            type: string
          kind:
            type: string
          metadata:
            type: object
          spec:
            properties:
              globalInfos:
                additionalProperties:
                  items:
                    properties:
                      macAddress:
                        type: string
                      portRanges:
                        items:
                          properties:
                            end:
                              maximum: 65535
                              minimum: 1
                              type: integer
                            start:
                              maximum: 65535
                              minimum: 1
                              type: integer
                          type: object
                        type: array
                      snatIp:
                        type: string
                      snatIpUid:
                        type: string
                      snatPolicyName:
                        type: string
                    required:
                    - macAddress
                    - portRanges
                    - snatIp
                    - snatIpUid
                    - snatPolicyName
                    type: object
                  type: array
                type: object
            required:
            - globalInfos
            type: object
          status:
            description: SnatGlobalInfoStatus defines the observed state of SnatGlobalInfo
            type: object
        type: object
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: snatlocalinfos.aci.snat
spec:
  group: aci.snat
  names:
    kind: SnatLocalInfo
    listKind: SnatLocalInfoList
    plural: snatlocalinfos
    singular: snatlocalinfo
  scope: Namespaced
  versions:
  - name: v1
    served: true
    storage: true
    schema:
      openAPIV3Schema:
        properties:
          apiVersion:
            type: string
          kind:
            type: string
          metadata:
            type: object
          spec:
            description: SnatLocalInfoSpec defines the desired state of SnatLocalInfo
            properties:
              localInfos:
                items:
                  properties:
                    podName:
                      type: string
                    podNamespace:
                      type: string
                    podUid:
                      type: string
                    snatPolicies:
                      items:
                        properties:
                          destIp:
                            items:
                              type: string
                            type: array
                          name:
                            type: string
                          snatIp:
                            type: string
                        required:
                        - destIp
                        - name
                        - snatIp
                        type: object
                      type: array
                  required:
                  - podName
                  - podNamespace
                  - podUid
                  - snatPolicies
                  type: object
                type: array
            required:
            - localInfos
            type: object
        type: object
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: snatpolicies.aci.snat
spec:
  group: aci.snat
  names:
    kind: SnatPolicy
    listKind: SnatPolicyList
    plural: snatpolicies
    singular: snatpolicy
  scope: Cluster
  versions:
  - name: v1
    served: true
    storage: true
    subresources:
      status: {}
    schema:
      openAPIV3Schema:
        type: object
        properties:
          apiVersion:
            type: string
          kind:
            type: string
          metadata:
            type: object
          spec:
            type: object
            properties:
              selector:
                type: object
                properties:
                  labels:
                    type: object
                    description: 'Selection of Pods'
                    properties:
                    additionalProperties:
                      type: string
                  namespace:
                    type: string
                type: object
              snatIp:
                type: array
                items:
                  type: string
              destIp:
                type: array
                items:
                  type: string
            type: object
          status:
            type: object
            properties:
            additionalProperties:
              type: string
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: nodeinfos.aci.snat
spec:
  group: aci.snat
  names:
    kind: NodeInfo
    listKind: NodeInfoList
    plural: nodeinfos
    singular: nodeinfo
  scope: Namespaced
  versions:
  - name: v1
    served: true
    storage: true
    schema:
      openAPIV3Schema:
        properties:
          apiVersion:
            type: string
          kind:
            type: string
          metadata:
            type: object
          spec:
            properties:
              macaddress:
                type: string
              snatpolicynames:
                additionalProperties:
                  type: boolean
                type: object
            type: object
          status:
            description: NodeinfoStatus defines the observed state of Nodeinfo
            type: object
        type: object
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: rdconfigs.aci.snat
spec:
  group: aci.snat
  names:
    kind: RdConfig
    listKind: RdConfigList
    plural: rdconfigs
    singular: rdconfig
  scope: Namespaced
  versions:
  - name: v1
    served: true
    storage: true
    schema:
      openAPIV3Schema:
        properties:
          apiVersion:
            type: string
          kind:
            type: string
          metadata:
            type: object
          spec:
            properties:
              discoveredsubnets:
                items:
                  type: string
                type: array
              usersubnets:
                items:
                  type: string
                type: array
            type: object
          status:
            description: NodeinfoStatus defines the observed state of Nodeinfo
            type: object
        type: object
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: networkpolicies.aci.netpol
spec:
  group: aci.netpol
  names:
    kind: NetworkPolicy
    listKind: NetworkPolicyList
    plural: networkpolicies
    singular: networkpolicy
  scope: Namespaced
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: Network Policy describes traffic flow at IP address or port level
        properties:
          apiVersion:
            type: string
          kind:
            type: string
          metadata:
            type: object
          spec:
            properties:
              appliedTo:
                properties:
                  namespaceSelector:
                    properties:
                      matchExpressions:
                        items:
                          properties:
                            key:
                              type: string
                            operator:
                              type: string
                            values:
                              items:
                                type: string
                              type: array
                          required:
                          - key
                          - operator
                          type: object
                        type: array
                      matchLabels:
                        additionalProperties:
                          type: string
                        type: object
                    type: object
                  podSelector:
                    description: allow ingress from the same namespace
                    properties:
                      matchExpressions:
                        items:
                          properties:
                            key:
                              type: string
                            operator:
                              type: string
                            values:
                              items:
                                type: string
                              type: array
                          required:
                          - key
                          - operator
                          type: object
                        type: array
                      matchLabels:
                        additionalProperties:
                          type: string
                        type: object
                    type: object
                type: object
              egress:
                description: Set of egress rules evaluated based on the order in which they are set.
                items:
                  properties:
                    action:
                      description: Action specifies the action to be applied on the rule.
                      type: string
                    enableLogging:
                      description: EnableLogging is used to indicate if agent should generate logs default to false.
                      type: boolean
                    ports:
                      description: Set of port and protocol allowed/denied by the rule. If this field is unset or empty, this rule matches all ports.
                      items:
                        description: NetworkPolicyPort describes the port and protocol to match in a rule.
                        properties:
                          endPort:
                            description: EndPort defines the end of the port range, being the end included within the range. It can only be specified when a numerical `port` is specified.
                            format: int32
                            type: integer
                          port:
                            anyOf:
                            - type: integer
                            - type: string
                            description: The port on the given protocol. This can be either a numerical or named port on a Pod. If this field is not provided, this matches all port names and numbers.
                            x-kubernetes-int-or-string: true
                          protocol:
                            default: TCP
                            description: The protocol (TCP, UDP, or SCTP) which traffic must match. If not specified, this field defaults to TCP.
                            type: string
                        type: object
                      type: array
                    to:
                      description: Rule is matched if traffic is intended for workloads selected by this field. If this field is empty or missing, this rule matches all destinations.
                      items:
                        properties:
                          ipBlock:
                            description: IPBlock describes the IPAddresses/IPBlocks that is matched in to/from. IPBlock cannot be set as part of the AppliedTo field. Cannot be set with any other selector.
                            properties:
                              cidr:
                                description: CIDR is a string representing the IP Block Valid examples are "192.168.1.1/24" or "2001:db9::/64"
                                type: string
                              except:
                                description: Except is a slice of CIDRs that should not be included within an IP Block Valid examples are "192.168.1.1/24" or "2001:db9::/64" Except values will be rejected if they are outside the CIDR range
                                items:
                                  type: string
                                type: array
                            required:
                            - cidr
                            type: object
                          namespaceSelector:
                            description: Select all Pods from Namespaces matched by this selector, as workloads in To/From fields. If set with PodSelector, Pods are matched from Namespaces matched by the NamespaceSelector. Cannot be set with any other selector except PodSelector or ExternalEntitySelector.
                            properties:
                              matchExpressions:
                                items:
                                  properties:
                                    key:
                                      type: string
                                    operator:
                                      description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                      type: string
                                    values:
                                      description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                      items:
                                        type: string
                                      type: array
                                  required:
                                  - key
                                  - operator
                                  type: object
                                type: array
                              matchLabels:
                                additionalProperties:
                                  type: string
                                type: object
                            type: object
                          podSelector:
                            description: Select Pods from NetworkPolicy's Namespace as workloads in AppliedTo/To/From fields. If set with NamespaceSelector, Pods are matched from Namespaces matched by the NamespaceSelector. Cannot be set with any other selector except NamespaceSelector.
                            properties:
                              matchExpressions:
                                items:
                                  properties:
                                    key:
                                      type: string
                                    operator:
                                      description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                      type: string
                                    values:
                                      description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                      items:
                                        type: string
                                      type: array
                                  required:
                                  - key
                                  - operator
                                  type: object
                                type: array
                              matchLabels:
                                additionalProperties:
                                  type: string
                                type: object
                            type: object
                        type: object
                      type: array
                    toFqDn:
                      properties:
                        matchNames:
                          items:
                            type: string
                          type: array
                      required:
                      - matchNames
                      type: object
                  required:
                  - enableLogging
                  - toFqDn
                  type: object
                type: array
              ingress:
                description: Set of ingress rules evaluated based on the order in which they are set.
                items:
                  properties:
                    action:
                      description: Action specifies the action to be applied on the rule.
                      type: string
                    enableLogging:
                      description: EnableLogging is used to indicate if agent should generate logs when rules are matched. Should be default to false.
                      type: boolean
                    from:
                      description: Rule is matched if traffic originates from workloads selected by this field. If this field is empty, this rule matches all sources.
                      items:
                        properties:
                          ipBlock:
                            description: IPBlock describes the IPAddresses/IPBlocks that is matched in to/from. IPBlock cannot be set as part of the AppliedTo field. Cannot be set with any other selector.
                            properties:
                              cidr:
                                description: CIDR is a string representing the IP Block Valid examples are "192.168.1.1/24" or "2001:db9::/64"
                                type: string
                              except:
                                description: Except is a slice of CIDRs that should not be included within an IP Block Valid examples are "192.168.1.1/24" or "2001:db9::/64" Except values will be rejected if they are outside the CIDR range
                                items:
                                  type: string
                                type: array
                            required:
                            - cidr
                            type: object
                          namespaceSelector:
                            properties:
                              matchExpressions:
                                items:
                                  properties:
                                    key:
                                      type: string
                                    operator:
                                      description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                      type: string
                                    values:
                                      description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                      items:
                                        type: string
                                      type: array
                                  required:
                                  - key
                                  - operator
                                  type: object
                                type: array
                              matchLabels:
                                additionalProperties:
                                  type: string
                                type: object
                            type: object
                          podSelector:
                            description: Select Pods from NetworkPolicy's Namespace as workloads in AppliedTo/To/From fields. If set with NamespaceSelector, Pods are matched from Namespaces matched by the NamespaceSelector. Cannot be set with any other selector except NamespaceSelector.
                            properties:
                              matchExpressions:
                                description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                items:
                                  properties:
                                    key:
                                      type: string
                                    operator:
                                      description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                      type: string
                                    values:
                                      description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                      items:
                                        type: string
                                      type: array
                                  required:
                                  - key
                                  - operator
                                  type: object
                                type: array
                              matchLabels:
                                additionalProperties:
                                  type: string
                                type: object
                            type: object
                        type: object
                      type: array
                    ports:
                      description: Set of port and protocol allowed/denied by the rule. If this field is unset or empty, this rule matches all ports.
                      items:
                        description: NetworkPolicyPort describes the port and protocol to match in a rule.
                        properties:
                          endPort:
                            description: EndPort defines the end of the port range, being the end included within the range. It can only be specified when a numerical `port` is specified.
                            format: int32
                            type: integer
                          port:
                            anyOf:
                            - type: integer
                            - type: string
                            description: The port on the given protocol. This can be either a numerical or named port on a Pod. If this field is not provided, this matches all port names and numbers.
                            x-kubernetes-int-or-string: true
                          protocol:
                            default: TCP
                            description: The protocol (TCP, UDP, or SCTP) which traffic must match. If not specified, this field defaults to TCP.
                            type: string
                        type: object
                      type: array
                  type: object
                type: array
              policyTypes:
                items:
                  description: Policy Type string describes the NetworkPolicy type This type is beta-level in 1.8
                  type: string
                type: array
              priority:
                description: Priority specfies the order of the NetworkPolicy relative to other NetworkPolicies.
                type: integer
              type:
                description: type of the policy.
                type: string
            required:
            - type
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: dnsnetworkpolicies.aci.dnsnetpol
spec:
  group: aci.dnsnetpol
  names:
    kind: DnsNetworkPolicy
    listKind: DnsNetworkPolicyList
    plural: dnsnetworkpolicies
    singular: dnsnetworkpolicy
  scope: Namespaced
  versions:
  - name: v1beta
    schema:
      openAPIV3Schema:
        description: dns network Policy
        properties:
          apiVersion:
            type: string
          kind:
            type: string
          metadata:
            type: object
          spec:
            properties:
              appliedTo:
                properties:
                  namespaceSelector:
                    properties:
                      matchExpressions:
                        items:
                          properties:
                            key:
                              type: string
                            operator:
                              type: string
                            values:
                              items:
                                type: string
                              type: array
                          required:
                          - key
                          - operator
                          type: object
                        type: array
                      matchLabels:
                        additionalProperties:
                          type: string
                        type: object
                    type: object
                  podSelector:
                    description: allow ingress from the same namespace
                    properties:
                      matchExpressions:
                        items:
                          properties:
                            key:
                              type: string
                            operator:
                              description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                              type: string
                            values:
                              description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                              items:
                                type: string
                              type: array
                          required:
                          - key
                          - operator
                          type: object
                        type: array
                      matchLabels:
                        additionalProperties:
                          type: string
                        type: object
                    type: object
                type: object
              egress:
                description: Set of egress rules evaluated based on the order in which they are set.
                properties:
                  toFqdn:
                    properties:
                      matchNames:
                        items:
                          type: string
                        type: array
                    required:
                    - matchNames
                    type: object
                required:
                - toFqdn
                type: object
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: qospolicies.aci.qos
spec:
  group: aci.qos
  names:
    kind: QosPolicy
    listKind: QosPolicyList
    plural: qospolicies
    singular: qospolicy
  scope: Namespaced
  preserveUnknownFields: false
  versions:
  - name: v1
    served: true
    storage: true
    subresources:
      status: {}
    schema:
      openAPIV3Schema:
        type: object
        properties:
          apiVersion:
            type: string
          kind:
            type: string
          spec:
            type: object
            properties:
              podSelector:
                description: 'Selection of Pods'
                type: object
                properties:
                  matchLabels:
                    type: object
                    description:
              ingress:
                type: object
                properties:
                  policing_rate:
                    type: integer
                    minimum: 0
                  policing_burst:
                    type: integer
                    minimum: 0
              egress:
                type: object
                properties:
                  policing_rate:
                    type: integer
                    minimum: 0
                  policing_burst:
                    type: integer
                    minimum: 0
              dscpmark:
                type: integer
                default: 0
                minimum: 0
                maximum: 63
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: netflowpolicies.aci.netflow
spec:
  group: aci.netflow
  names:
    kind: NetflowPolicy
    listKind: NetflowPolicyList
    plural: netflowpolicies
    singular: netflowpolicy
  scope: Cluster
  preserveUnknownFields: false
  versions:
  - name: v1alpha
    served: true
    storage: true
    schema:
   # openAPIV3Schema is the schema for validating custom objects.
      openAPIV3Schema:
        type: object
        properties:
          apiVersion:
            type: string
          kind:
            type: string
          spec:
            type: object
            properties:
              flowSamplingPolicy:
                type: object
                properties:
                  destIp:
                    type: string
                  destPort:
                    type: integer
                    minimum: 0
                    maximum: 65535
                    default: 2055
                  flowType:
                    type: string
                    enum:
                      - netflow
                      - ipfix
                    default: netflow
                  activeFlowTimeOut:
                    type: integer
                    minimum: 0
                    maximum: 3600
                    default: 60
                  idleFlowTimeOut:
                    type: integer
                    minimum: 0
                    maximum: 600
                    default: 15
                  samplingRate:
                    type: integer
                    minimum: 0
                    maximum: 1000
                    default: 0
                required:
                - destIp
                type: object
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: erspanpolicies.aci.erspan
spec:
  group: aci.erspan
  names:
    kind: ErspanPolicy
    listKind: ErspanPolicyList
    plural: erspanpolicies
    singular: erspanpolicy
  scope: Cluster
  preserveUnknownFields: false
  versions:
  - name: v1alpha
    served: true
    storage: true
    schema:
      openAPIV3Schema:
        type: object
        properties:
          apiVersion:
            type: string
          kind:
            type: string
          spec:
            type: object
            properties:
              selector:
                type: object
                description: 'Selection of Pods'
                properties:
                  labels:
                    type: object
                    properties:
                    additionalProperties:
                      type: string
                  namespace:
                    type: string
              source:
                type: object
                properties:
                  adminState:
                    description: Administrative state.
                    default: start
                    type: string
                    enum:
                      - start
                      - stop
                  direction:
                    description: Direction of the packets to monitor.
                    default: both
                    type: string
                    enum:
                      - in
                      - out
                      - both
              destination:
                type: object
                properties:
                  destIP:
                    description: Destination IP of the ERSPAN packet.
                    type: string
                  flowID:
                    description: Unique flow ID of the ERSPAN packet.
                    default: 1
                    type: integer
                    minimum: 1
                    maximum: 1023
                required:
                - destIP
                type: object
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: enabledroplogs.aci.droplog
spec:
  group: aci.droplog
  names:
    kind: EnableDropLog
    listKind: EnableDropLogList
    plural: enabledroplogs
    singular: enabledroplog
  scope: Cluster
  versions:
  - name: v1alpha1
    served: true
    storage: true
    schema:
   # openAPIV3Schema is the schema for validating custom objects.
      openAPIV3Schema:
        type: object
        properties:
          apiVersion:
            type: string
          kind:
            type: string
          spec:
            description: Defines the desired state of EnableDropLog
            type: object
            properties:
              disableDefaultDropLog:
                description: Disables the default droplog enabled by acc-provision.
                default: false
                type: boolean
              nodeSelector:
                type: object
                description: Drop logging is enabled on nodes selected based on labels
                properties:
                  labels:
                    type: object
                    properties:
                    additionalProperties:
                      type: string
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: prunedroplogs.aci.droplog
spec:
  group: aci.droplog
  names:
    kind: PruneDropLog
    listKind: PruneDropLogList
    plural: prunedroplogs
    singular: prunedroplog
  scope: Cluster
  versions:
  - name: v1alpha1
    served: true
    storage: true
    schema:
   # openAPIV3Schema is the schema for validating custom objects.
      openAPIV3Schema:
        type: object
        properties:
          apiVersion:
            type: string
          kind:
            type: string
          spec:
            description: Defines the desired state of PruneDropLog
            type: object
            properties:
              nodeSelector:
                type: object
                description: Drop logging filters are applied to nodes selected based on labels
                properties:
                  labels:
                    type: object
                    properties:
                    additionalProperties:
                      type: string
              dropLogFilters:
                type: object
                properties:
                  srcIP:
                    type: string
                  destIP:
                    type: string
                  srcMAC:
                    type: string
                  destMAC:
                    type: string
                  srcPort:
                    type: integer
                  destPort:
                    type: integer
                  ipProto:
                    type: integer
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: accprovisioninputs.aci.ctrl
spec:
  group: aci.ctrl
  names:
    kind: AccProvisionInput
    listKind: AccProvisionInputList
    plural: accprovisioninputs
    singular: accprovisioninput
  scope: Namespaced
  versions:
  - name: v1alpha1
    served: true
    storage: true
    subresources:
      status: {}
    schema:
      openAPIV3Schema:
        description: accprovisioninput defines the input configuration for ACI CNI
        properties:
          apiVersion:
            type: string
          kind:
            type: string
          metadata:
            type: object
          spec:
            description: AccProvisionInputSpec defines the desired spec for accprovisioninput object
            properties:
              acc_provision_input:
                type: object
                properties:
                  operator_managed_config:
                    type: object
                    properties:
                      enable_updates:
                        type: boolean
                  aci_config:
                    type: object
                    properties:
                      sync_login:
                        type: object
                        properties:
                          certfile:
                            type: string
                          keyfile:
                            type: string
                      client_ssl:
                        type: boolean
                  net_config:
                    type: object
                    properties:
                      interface_mtu:
                        type: integer
                      service_monitor_interval:
                        type: integer
                      pbr_tracking_non_snat:
                        type: boolean
                      pod_subnet_chunk_size:
                        type: integer
                      disable_wait_for_network:
                        type: boolean
                      duration_wait_for_network:
                        type: integer
                  registry:
                    type: object
                    properties:
                      image_prefix:
                        type: string
                      image_pull_secret:
                        type: string
                      aci_containers_operator_version:
                        type: string
                      aci_containers_controller_version:
                        type: string
                      aci_containers_host_version:
                        type: string
                      acc_provision_operator_version:
                        type: string
                      aci_cni_operator_version:
                        type: string
                      cnideploy_version:
                        type: string
                      opflex_agent_version:
                        type: string
                      openvswitch_version:
                        type: string
                      gbp_version:
                        type: string
                  logging:
                    type: object
                    properties:
                      size:
                        type: integer
                      controller_log_level:
                        type: string
                      hostagent_log_level:
                        type: string
                      opflexagent_log_level:
                        type: string
                  istio_config:
                    type: object
                    properties:
                      install_istio:
                        type: boolean
                      install_profile:
                        type: string
                  multus:
                    type: object
                    properties:
                      disable:
                        type: boolean
                  drop_log_config:
                    type: object
                    properties:
                      enable:
                        type: boolean
                  nodepodif_config:
                    type: object
                    properties:
                      enable:
                        type: boolean
                  sriov_config:
                    type: object
                    properties:
                      enable:
                        type: boolean
                  kube_config:
                    type: object
                    properties:
                      ovs_memory_limit:
                        type: string
                      use_privileged_containers:
                        type: boolean
                      image_pull_policy:
                        type: string
                      reboot_opflex_with_ovs:
                        type: string
                      snat_operator:
                        type: object
                        properties:
                          port_range:
                            type: object
                            properties:
                              start:
                                type: integer
                              end:
                                type: integer
                              ports_per_node:
                                type: integer
                          contract_scope:
                            type: string
                          disable_periodic_snat_global_info_sync:
                            type: boolean
            type: object
          status:
            description: AccProvisionInputStatus defines the successful completion of AccProvisionInput
            properties:
              status:
                type: boolean
            type: object
        required:
        - spec
        type: object
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: aci-operator-config
  namespace: aci-containers-system
  labels:
    aci-containers-config-version: "65a61686-a03e-4105-adfd-8a59a3aeb800"
    network-plugin: aci-containers
data:
  spec: |-
    {
        "flavor": "openshift-4.10-esx",
        "config": "CmFwaVZlcnNpb246IHYxCmtpbmQ6IE5hbWVzcGFjZQptZXRhZGF0YToKICBuYW1lOiBhY2ktY29udGFpbmVycy1zeXN0ZW0KICBsYWJlbHM6CiAgICBhY2ktY29udGFpbmVycy1jb25maWctdmVyc2lvbjogIjY1YTYxNjg2LWEwM2UtNDEwNS1hZGZkLThhNTlhM2FlYjgwMCIKICAgIG5ldHdvcmstcGx1Z2luOiBhY2ktY29udGFpbmVycwogICAgb3BlbnNoaWZ0LmlvL3J1bi1sZXZlbDogIjAiCiAgYW5ub3RhdGlvbnM6CiAgICBvcGVuc2hpZnQuaW8vbm9kZS1zZWxlY3RvcjogJycKLS0tCmFwaVZlcnNpb246IHNjaGVkdWxpbmcuazhzLmlvL3YxCmtpbmQ6IFByaW9yaXR5Q2xhc3MKbWV0YWRhdGE6CiAgbmFtZTogYWNpY25pLXByaW9yaXR5CnZhbHVlOiAxMDAwMDAwMDAwCmdsb2JhbERlZmF1bHQ6IGZhbHNlCmRlc2NyaXB0aW9uOiAiVGhpcyBwcmlvcml0eSBjbGFzcyBpcyB1c2VkIGZvciBBQ0ktQ05JIHJlc291cmNlcyIKLS0tCmFwaVZlcnNpb246IGFwaWV4dGVuc2lvbnMuazhzLmlvL3YxCmtpbmQ6IEN1c3RvbVJlc291cmNlRGVmaW5pdGlvbgptZXRhZGF0YToKICBuYW1lOiBub2RlcG9kaWZzLmFjaS5hdwpzcGVjOgogIGdyb3VwOiBhY2kuYXcKICBuYW1lczoKICAgIGtpbmQ6IE5vZGVQb2RJRgogICAgbGlzdEtpbmQ6IE5vZGVQb2RJRkxpc3QKICAgIHBsdXJhbDogbm9kZXBvZGlmcwogICAgc2luZ3VsYXI6IG5vZGVwb2RpZgogIHNjb3BlOiBOYW1lc3BhY2VkCiAgdmVyc2lvbnM6CiAgLSBuYW1lOiB2MQogICAgc2VydmVkOiB0cnVlCiAgICBzdG9yYWdlOiB0cnVlCiAgICBzY2hlbWE6CiAgICAgIG9wZW5BUElWM1NjaGVtYToKICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgYXBpVmVyc2lvbjoKICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICBraW5kOgogICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgIG1ldGFkYXRhOgogICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgIHNwZWM6CiAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgIHBvZGlmczoKICAgICAgICAgICAgICAgIHR5cGU6IGFycmF5CiAgICAgICAgICAgICAgICBpdGVtczoKICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVySUQ6CiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICBlcGc6CiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICBpZm5hbWU6CiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICBpcGFkZHI6CiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICBtYWNhZGRyOgogICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgcG9kbmFtZToKICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgIHBvZG5zOgogICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgdnRlcDoKICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgIHJlcXVpcmVkOgogICAgICAgIC0gc3BlYwogICAgICAgIHR5cGU6IG9iamVjdAotLS0KYXBpVmVyc2lvbjogYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEKa2luZDogQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uCm1ldGFkYXRhOgogIG5hbWU6IHNuYXRnbG9iYWxpbmZvcy5hY2kuc25hdApzcGVjOgogIGdyb3VwOiBhY2kuc25hdAogIG5hbWVzOgogICAga2luZDogU25hdEdsb2JhbEluZm8KICAgIGxpc3RLaW5kOiBTbmF0R2xvYmFsSW5mb0xpc3QKICAgIHBsdXJhbDogc25hdGdsb2JhbGluZm9zCiAgICBzaW5ndWxhcjogc25hdGdsb2JhbGluZm8KICBzY29wZTogTmFtZXNwYWNlZAogIHZlcnNpb25zOgogIC0gbmFtZTogdjEKICAgIHNlcnZlZDogdHJ1ZQogICAgc3RvcmFnZTogdHJ1ZQogICAgc2NoZW1hOgogICAgICBvcGVuQVBJVjNTY2hlbWE6CiAgICAgICAgZGVzY3JpcHRpb246IFNuYXRHbG9iYWxJbmZvIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBzbmF0Z2xvYmFsaW5mb3MgQVBJCiAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgIGFwaVZlcnNpb246CiAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAga2luZDoKICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICBtZXRhZGF0YToKICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICBzcGVjOgogICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgIGdsb2JhbEluZm9zOgogICAgICAgICAgICAgICAgYWRkaXRpb25hbFByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgIGl0ZW1zOgogICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgICBtYWNBZGRyZXNzOgogICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgIHBvcnRSYW5nZXM6CiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOgogICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heGltdW06IDY1NTM1CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbmltdW06IDEKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogaW50ZWdlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heGltdW06IDY1NTM1CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbmltdW06IDEKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogaW50ZWdlcgogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBhcnJheQogICAgICAgICAgICAgICAgICAgICAgc25hdElwOgogICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgIHNuYXRJcFVpZDoKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICBzbmF0UG9saWN5TmFtZToKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWQ6CiAgICAgICAgICAgICAgICAgICAgLSBtYWNBZGRyZXNzCiAgICAgICAgICAgICAgICAgICAgLSBwb3J0UmFuZ2VzCiAgICAgICAgICAgICAgICAgICAgLSBzbmF0SXAKICAgICAgICAgICAgICAgICAgICAtIHNuYXRJcFVpZAogICAgICAgICAgICAgICAgICAgIC0gc25hdFBvbGljeU5hbWUKICAgICAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICAgICAgdHlwZTogYXJyYXkKICAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgICByZXF1aXJlZDoKICAgICAgICAgICAgLSBnbG9iYWxJbmZvcwogICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgIHN0YXR1czoKICAgICAgICAgICAgZGVzY3JpcHRpb246IFNuYXRHbG9iYWxJbmZvU3RhdHVzIGRlZmluZXMgdGhlIG9ic2VydmVkIHN0YXRlIG9mIFNuYXRHbG9iYWxJbmZvCiAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgIHR5cGU6IG9iamVjdAotLS0KYXBpVmVyc2lvbjogYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEKa2luZDogQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uCm1ldGFkYXRhOgogIG5hbWU6IHNuYXRsb2NhbGluZm9zLmFjaS5zbmF0CnNwZWM6CiAgZ3JvdXA6IGFjaS5zbmF0CiAgbmFtZXM6CiAgICBraW5kOiBTbmF0TG9jYWxJbmZvCiAgICBsaXN0S2luZDogU25hdExvY2FsSW5mb0xpc3QKICAgIHBsdXJhbDogc25hdGxvY2FsaW5mb3MKICAgIHNpbmd1bGFyOiBzbmF0bG9jYWxpbmZvCiAgc2NvcGU6IE5hbWVzcGFjZWQKICB2ZXJzaW9uczoKICAtIG5hbWU6IHYxCiAgICBzZXJ2ZWQ6IHRydWUKICAgIHN0b3JhZ2U6IHRydWUKICAgIHNjaGVtYToKICAgICAgb3BlbkFQSVYzU2NoZW1hOgogICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICBhcGlWZXJzaW9uOgogICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgIGtpbmQ6CiAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgbWV0YWRhdGE6CiAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgc3BlYzoKICAgICAgICAgICAgZGVzY3JpcHRpb246IFNuYXRMb2NhbEluZm9TcGVjIGRlZmluZXMgdGhlIGRlc2lyZWQgc3RhdGUgb2YgU25hdExvY2FsSW5mbwogICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgIGxvY2FsSW5mb3M6CiAgICAgICAgICAgICAgICBpdGVtczoKICAgICAgICAgICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgICAgICAgICBwb2ROYW1lOgogICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgcG9kTmFtZXNwYWNlOgogICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgcG9kVWlkOgogICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgc25hdFBvbGljaWVzOgogICAgICAgICAgICAgICAgICAgICAgaXRlbXM6CiAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzdElwOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogYXJyYXkKICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgc25hdElwOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkOgogICAgICAgICAgICAgICAgICAgICAgICAtIGRlc3RJcAogICAgICAgICAgICAgICAgICAgICAgICAtIG5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgLSBzbmF0SXAKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBhcnJheQogICAgICAgICAgICAgICAgICByZXF1aXJlZDoKICAgICAgICAgICAgICAgICAgLSBwb2ROYW1lCiAgICAgICAgICAgICAgICAgIC0gcG9kTmFtZXNwYWNlCiAgICAgICAgICAgICAgICAgIC0gcG9kVWlkCiAgICAgICAgICAgICAgICAgIC0gc25hdFBvbGljaWVzCiAgICAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgICAgICAgdHlwZTogYXJyYXkKICAgICAgICAgICAgcmVxdWlyZWQ6CiAgICAgICAgICAgIC0gbG9jYWxJbmZvcwogICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICB0eXBlOiBvYmplY3QKLS0tCmFwaVZlcnNpb246IGFwaWV4dGVuc2lvbnMuazhzLmlvL3YxCmtpbmQ6IEN1c3RvbVJlc291cmNlRGVmaW5pdGlvbgptZXRhZGF0YToKICBuYW1lOiBzbmF0cG9saWNpZXMuYWNpLnNuYXQKc3BlYzoKICBncm91cDogYWNpLnNuYXQKICBuYW1lczoKICAgIGtpbmQ6IFNuYXRQb2xpY3kKICAgIGxpc3RLaW5kOiBTbmF0UG9saWN5TGlzdAogICAgcGx1cmFsOiBzbmF0cG9saWNpZXMKICAgIHNpbmd1bGFyOiBzbmF0cG9saWN5CiAgc2NvcGU6IENsdXN0ZXIKICB2ZXJzaW9uczoKICAtIG5hbWU6IHYxCiAgICBzZXJ2ZWQ6IHRydWUKICAgIHN0b3JhZ2U6IHRydWUKICAgIHN1YnJlc291cmNlczoKICAgICAgc3RhdHVzOiB7fQogICAgc2NoZW1hOgogICAgICBvcGVuQVBJVjNTY2hlbWE6CiAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgIGFwaVZlcnNpb246CiAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAga2luZDoKICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICBtZXRhZGF0YToKICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICBzcGVjOgogICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgICBzZWxlY3RvcjoKICAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgICAgICAgbGFiZWxzOgogICAgICAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnU2VsZWN0aW9uIG9mIFBvZHMnCiAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgICAgICAgICBhZGRpdGlvbmFsUHJvcGVydGllczoKICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICBuYW1lc3BhY2U6CiAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICBzbmF0SXA6CiAgICAgICAgICAgICAgICB0eXBlOiBhcnJheQogICAgICAgICAgICAgICAgaXRlbXM6CiAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgIGRlc3RJcDoKICAgICAgICAgICAgICAgIHR5cGU6IGFycmF5CiAgICAgICAgICAgICAgICBpdGVtczoKICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgc3RhdHVzOgogICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgYWRkaXRpb25hbFByb3BlcnRpZXM6CiAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCi0tLQphcGlWZXJzaW9uOiBhcGlleHRlbnNpb25zLms4cy5pby92MQpraW5kOiBDdXN0b21SZXNvdXJjZURlZmluaXRpb24KbWV0YWRhdGE6CiAgbmFtZTogbm9kZWluZm9zLmFjaS5zbmF0CnNwZWM6CiAgZ3JvdXA6IGFjaS5zbmF0CiAgbmFtZXM6CiAgICBraW5kOiBOb2RlSW5mbwogICAgbGlzdEtpbmQ6IE5vZGVJbmZvTGlzdAogICAgcGx1cmFsOiBub2RlaW5mb3MKICAgIHNpbmd1bGFyOiBub2RlaW5mbwogIHNjb3BlOiBOYW1lc3BhY2VkCiAgdmVyc2lvbnM6CiAgLSBuYW1lOiB2MQogICAgc2VydmVkOiB0cnVlCiAgICBzdG9yYWdlOiB0cnVlCiAgICBzY2hlbWE6CiAgICAgIG9wZW5BUElWM1NjaGVtYToKICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgYXBpVmVyc2lvbjoKICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICBraW5kOgogICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgIG1ldGFkYXRhOgogICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgIHNwZWM6CiAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgbWFjYWRkcmVzczoKICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgIHNuYXRwb2xpY3luYW1lczoKICAgICAgICAgICAgICAgIGFkZGl0aW9uYWxQcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgICB0eXBlOiBib29sZWFuCiAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICBzdGF0dXM6CiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBOb2RlaW5mb1N0YXR1cyBkZWZpbmVzIHRoZSBvYnNlcnZlZCBzdGF0ZSBvZiBOb2RlaW5mbwogICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICB0eXBlOiBvYmplY3QKLS0tCmFwaVZlcnNpb246IGFwaWV4dGVuc2lvbnMuazhzLmlvL3YxCmtpbmQ6IEN1c3RvbVJlc291cmNlRGVmaW5pdGlvbgptZXRhZGF0YToKICBuYW1lOiByZGNvbmZpZ3MuYWNpLnNuYXQKc3BlYzoKICBncm91cDogYWNpLnNuYXQKICBuYW1lczoKICAgIGtpbmQ6IFJkQ29uZmlnCiAgICBsaXN0S2luZDogUmRDb25maWdMaXN0CiAgICBwbHVyYWw6IHJkY29uZmlncwogICAgc2luZ3VsYXI6IHJkY29uZmlnCiAgc2NvcGU6IE5hbWVzcGFjZWQKICB2ZXJzaW9uczoKICAtIG5hbWU6IHYxCiAgICBzZXJ2ZWQ6IHRydWUKICAgIHN0b3JhZ2U6IHRydWUKICAgIHNjaGVtYToKICAgICAgb3BlbkFQSVYzU2NoZW1hOgogICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICBhcGlWZXJzaW9uOgogICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgIGtpbmQ6CiAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgbWV0YWRhdGE6CiAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgc3BlYzoKICAgICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgICBkaXNjb3ZlcmVkc3VibmV0czoKICAgICAgICAgICAgICAgIGl0ZW1zOgogICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgIHR5cGU6IGFycmF5CiAgICAgICAgICAgICAgdXNlcnN1Ym5ldHM6CiAgICAgICAgICAgICAgICBpdGVtczoKICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICB0eXBlOiBhcnJheQogICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgIHN0YXR1czoKICAgICAgICAgICAgZGVzY3JpcHRpb246IE5vZGVpbmZvU3RhdHVzIGRlZmluZXMgdGhlIG9ic2VydmVkIHN0YXRlIG9mIE5vZGVpbmZvCiAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgIHR5cGU6IG9iamVjdAotLS0KYXBpVmVyc2lvbjogYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEKa2luZDogQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uCm1ldGFkYXRhOgogIG5hbWU6IG5ldHdvcmtwb2xpY2llcy5hY2kubmV0cG9sCnNwZWM6CiAgZ3JvdXA6IGFjaS5uZXRwb2wKICBuYW1lczoKICAgIGtpbmQ6IE5ldHdvcmtQb2xpY3kKICAgIGxpc3RLaW5kOiBOZXR3b3JrUG9saWN5TGlzdAogICAgcGx1cmFsOiBuZXR3b3JrcG9saWNpZXMKICAgIHNpbmd1bGFyOiBuZXR3b3JrcG9saWN5CiAgc2NvcGU6IE5hbWVzcGFjZWQKICB2ZXJzaW9uczoKICAtIG5hbWU6IHYxCiAgICBzY2hlbWE6CiAgICAgIG9wZW5BUElWM1NjaGVtYToKICAgICAgICBkZXNjcmlwdGlvbjogTmV0d29yayBQb2xpY3kgZGVzY3JpYmVzIHRyYWZmaWMgZmxvdyBhdCBJUCBhZGRyZXNzIG9yIHBvcnQgbGV2ZWwKICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgYXBpVmVyc2lvbjoKICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICBraW5kOgogICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgIG1ldGFkYXRhOgogICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgIHNwZWM6CiAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgYXBwbGllZFRvOgogICAgICAgICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgICAgICAgbmFtZXNwYWNlU2VsZWN0b3I6CiAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgICAgICAgICAgIG1hdGNoRXhwcmVzc2lvbnM6CiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOgogICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BlcmF0b3I6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogYXJyYXkKICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlZDoKICAgICAgICAgICAgICAgICAgICAgICAgICAtIGtleQogICAgICAgICAgICAgICAgICAgICAgICAgIC0gb3BlcmF0b3IKICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogYXJyYXkKICAgICAgICAgICAgICAgICAgICAgIG1hdGNoTGFiZWxzOgogICAgICAgICAgICAgICAgICAgICAgICBhZGRpdGlvbmFsUHJvcGVydGllczoKICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICAgIHBvZFNlbGVjdG9yOgogICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBhbGxvdyBpbmdyZXNzIGZyb20gdGhlIHNhbWUgbmFtZXNwYWNlCiAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgICAgICAgICAgIG1hdGNoRXhwcmVzc2lvbnM6CiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOgogICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BlcmF0b3I6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogYXJyYXkKICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlZDoKICAgICAgICAgICAgICAgICAgICAgICAgICAtIGtleQogICAgICAgICAgICAgICAgICAgICAgICAgIC0gb3BlcmF0b3IKICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogYXJyYXkKICAgICAgICAgICAgICAgICAgICAgIG1hdGNoTGFiZWxzOgogICAgICAgICAgICAgICAgICAgICAgICBhZGRpdGlvbmFsUHJvcGVydGllczoKICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICBlZ3Jlc3M6CiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogU2V0IG9mIGVncmVzcyBydWxlcyBldmFsdWF0ZWQgYmFzZWQgb24gdGhlIG9yZGVyIGluIHdoaWNoIHRoZXkgYXJlIHNldC4KICAgICAgICAgICAgICAgIGl0ZW1zOgogICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgICAgIGFjdGlvbjoKICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBBY3Rpb24gc3BlY2lmaWVzIHRoZSBhY3Rpb24gdG8gYmUgYXBwbGllZCBvbiB0aGUgcnVsZS4KICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgIGVuYWJsZUxvZ2dpbmc6CiAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogRW5hYmxlTG9nZ2luZyBpcyB1c2VkIHRvIGluZGljYXRlIGlmIGFnZW50IHNob3VsZCBnZW5lcmF0ZSBsb2dzIGRlZmF1bHQgdG8gZmFsc2UuCiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBib29sZWFuCiAgICAgICAgICAgICAgICAgICAgcG9ydHM6CiAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogU2V0IG9mIHBvcnQgYW5kIHByb3RvY29sIGFsbG93ZWQvZGVuaWVkIGJ5IHRoZSBydWxlLiBJZiB0aGlzIGZpZWxkIGlzIHVuc2V0IG9yIGVtcHR5LCB0aGlzIHJ1bGUgbWF0Y2hlcyBhbGwgcG9ydHMuCiAgICAgICAgICAgICAgICAgICAgICBpdGVtczoKICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IE5ldHdvcmtQb2xpY3lQb3J0IGRlc2NyaWJlcyB0aGUgcG9ydCBhbmQgcHJvdG9jb2wgdG8gbWF0Y2ggaW4gYSBydWxlLgogICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgICAgICAgICAgIGVuZFBvcnQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogRW5kUG9ydCBkZWZpbmVzIHRoZSBlbmQgb2YgdGhlIHBvcnQgcmFuZ2UsIGJlaW5nIHRoZSBlbmQgaW5jbHVkZWQgd2l0aGluIHRoZSByYW5nZS4gSXQgY2FuIG9ubHkgYmUgc3BlY2lmaWVkIHdoZW4gYSBudW1lcmljYWwgYHBvcnRgIGlzIHNwZWNpZmllZC4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdDogaW50MzIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGludGVnZXIKICAgICAgICAgICAgICAgICAgICAgICAgICBwb3J0OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgYW55T2Y6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtIHR5cGU6IGludGVnZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0gdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogVGhlIHBvcnQgb24gdGhlIGdpdmVuIHByb3RvY29sLiBUaGlzIGNhbiBiZSBlaXRoZXIgYSBudW1lcmljYWwgb3IgbmFtZWQgcG9ydCBvbiBhIFBvZC4gSWYgdGhpcyBmaWVsZCBpcyBub3QgcHJvdmlkZWQsIHRoaXMgbWF0Y2hlcyBhbGwgcG9ydCBuYW1lcyBhbmQgbnVtYmVycy4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgta3ViZXJuZXRlcy1pbnQtb3Itc3RyaW5nOiB0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvdG9jb2w6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiBUQ1AKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBUaGUgcHJvdG9jb2wgKFRDUCwgVURQLCBvciBTQ1RQKSB3aGljaCB0cmFmZmljIG11c3QgbWF0Y2guIElmIG5vdCBzcGVjaWZpZWQsIHRoaXMgZmllbGQgZGVmYXVsdHMgdG8gVENQLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgICAgICAgICAgICAgdHlwZTogYXJyYXkKICAgICAgICAgICAgICAgICAgICB0bzoKICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBSdWxlIGlzIG1hdGNoZWQgaWYgdHJhZmZpYyBpcyBpbnRlbmRlZCBmb3Igd29ya2xvYWRzIHNlbGVjdGVkIGJ5IHRoaXMgZmllbGQuIElmIHRoaXMgZmllbGQgaXMgZW1wdHkgb3IgbWlzc2luZywgdGhpcyBydWxlIG1hdGNoZXMgYWxsIGRlc3RpbmF0aW9ucy4KICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOgogICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgICAgICAgICAgIGlwQmxvY2s6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogSVBCbG9jayBkZXNjcmliZXMgdGhlIElQQWRkcmVzc2VzL0lQQmxvY2tzIHRoYXQgaXMgbWF0Y2hlZCBpbiB0by9mcm9tLiBJUEJsb2NrIGNhbm5vdCBiZSBzZXQgYXMgcGFydCBvZiB0aGUgQXBwbGllZFRvIGZpZWxkLiBDYW5ub3QgYmUgc2V0IHdpdGggYW55IG90aGVyIHNlbGVjdG9yLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2lkcjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogQ0lEUiBpcyBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIElQIEJsb2NrIFZhbGlkIGV4YW1wbGVzIGFyZSAiMTkyLjE2OC4xLjEvMjQiIG9yICIyMDAxOmRiOTo6LzY0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IEV4Y2VwdCBpcyBhIHNsaWNlIG9mIENJRFJzIHRoYXQgc2hvdWxkIG5vdCBiZSBpbmNsdWRlZCB3aXRoaW4gYW4gSVAgQmxvY2sgVmFsaWQgZXhhbXBsZXMgYXJlICIxOTIuMTY4LjEuMS8yNCIgb3IgIjIwMDE6ZGI5OjovNjQiIEV4Y2VwdCB2YWx1ZXMgd2lsbCBiZSByZWplY3RlZCBpZiB0aGV5IGFyZSBvdXRzaWRlIHRoZSBDSURSIHJhbmdlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBhcnJheQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtIGNpZHIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVzcGFjZVNlbGVjdG9yOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFNlbGVjdCBhbGwgUG9kcyBmcm9tIE5hbWVzcGFjZXMgbWF0Y2hlZCBieSB0aGlzIHNlbGVjdG9yLCBhcyB3b3JrbG9hZHMgaW4gVG8vRnJvbSBmaWVsZHMuIElmIHNldCB3aXRoIFBvZFNlbGVjdG9yLCBQb2RzIGFyZSBtYXRjaGVkIGZyb20gTmFtZXNwYWNlcyBtYXRjaGVkIGJ5IHRoZSBOYW1lc3BhY2VTZWxlY3Rvci4gQ2Fubm90IGJlIHNldCB3aXRoIGFueSBvdGhlciBzZWxlY3RvciBleGNlcHQgUG9kU2VsZWN0b3Igb3IgRXh0ZXJuYWxFbnRpdHlTZWxlY3Rvci4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoRXhwcmVzc2lvbnM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wZXJhdG9yOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBvcGVyYXRvciByZXByZXNlbnRzIGEga2V5J3MgcmVsYXRpb25zaGlwIHRvIGEgc2V0IG9mIHZhbHVlcy4gVmFsaWQgb3BlcmF0b3JzIGFyZSBJbiwgTm90SW4sIEV4aXN0cyBhbmQgRG9lc05vdEV4aXN0LgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IHZhbHVlcyBpcyBhbiBhcnJheSBvZiBzdHJpbmcgdmFsdWVzLiBJZiB0aGUgb3BlcmF0b3IgaXMgSW4gb3IgTm90SW4sIHRoZSB2YWx1ZXMgYXJyYXkgbXVzdCBiZSBub24tZW1wdHkuIElmIHRoZSBvcGVyYXRvciBpcyBFeGlzdHMgb3IgRG9lc05vdEV4aXN0LCB0aGUgdmFsdWVzIGFycmF5IG11c3QgYmUgZW1wdHkuIFRoaXMgYXJyYXkgaXMgcmVwbGFjZWQgZHVyaW5nIGEgc3RyYXRlZ2ljIG1lcmdlIHBhdGNoLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogYXJyYXkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLSBrZXkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0gb3BlcmF0b3IKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGFycmF5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoTGFiZWxzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZGl0aW9uYWxQcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICAgICAgICAgICAgICBwb2RTZWxlY3RvcjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBTZWxlY3QgUG9kcyBmcm9tIE5ldHdvcmtQb2xpY3kncyBOYW1lc3BhY2UgYXMgd29ya2xvYWRzIGluIEFwcGxpZWRUby9Uby9Gcm9tIGZpZWxkcy4gSWYgc2V0IHdpdGggTmFtZXNwYWNlU2VsZWN0b3IsIFBvZHMgYXJlIG1hdGNoZWQgZnJvbSBOYW1lc3BhY2VzIG1hdGNoZWQgYnkgdGhlIE5hbWVzcGFjZVNlbGVjdG9yLiBDYW5ub3QgYmUgc2V0IHdpdGggYW55IG90aGVyIHNlbGVjdG9yIGV4Y2VwdCBOYW1lc3BhY2VTZWxlY3Rvci4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoRXhwcmVzc2lvbnM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wZXJhdG9yOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBvcGVyYXRvciByZXByZXNlbnRzIGEga2V5J3MgcmVsYXRpb25zaGlwIHRvIGEgc2V0IG9mIHZhbHVlcy4gVmFsaWQgb3BlcmF0b3JzIGFyZSBJbiwgTm90SW4sIEV4aXN0cyBhbmQgRG9lc05vdEV4aXN0LgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IHZhbHVlcyBpcyBhbiBhcnJheSBvZiBzdHJpbmcgdmFsdWVzLiBJZiB0aGUgb3BlcmF0b3IgaXMgSW4gb3IgTm90SW4sIHRoZSB2YWx1ZXMgYXJyYXkgbXVzdCBiZSBub24tZW1wdHkuIElmIHRoZSBvcGVyYXRvciBpcyBFeGlzdHMgb3IgRG9lc05vdEV4aXN0LCB0aGUgdmFsdWVzIGFycmF5IG11c3QgYmUgZW1wdHkuIFRoaXMgYXJyYXkgaXMgcmVwbGFjZWQgZHVyaW5nIGEgc3RyYXRlZ2ljIG1lcmdlIHBhdGNoLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogYXJyYXkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLSBrZXkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0gb3BlcmF0b3IKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGFycmF5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoTGFiZWxzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZGl0aW9uYWxQcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBhcnJheQogICAgICAgICAgICAgICAgICAgIHRvRnFEbjoKICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoTmFtZXM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBhcnJheQogICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWQ6CiAgICAgICAgICAgICAgICAgICAgICAtIG1hdGNoTmFtZXMKICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgICAgICAgICByZXF1aXJlZDoKICAgICAgICAgICAgICAgICAgLSBlbmFibGVMb2dnaW5nCiAgICAgICAgICAgICAgICAgIC0gdG9GcURuCiAgICAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgICAgICAgdHlwZTogYXJyYXkKICAgICAgICAgICAgICBpbmdyZXNzOgogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFNldCBvZiBpbmdyZXNzIHJ1bGVzIGV2YWx1YXRlZCBiYXNlZCBvbiB0aGUgb3JkZXIgaW4gd2hpY2ggdGhleSBhcmUgc2V0LgogICAgICAgICAgICAgICAgaXRlbXM6CiAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOgogICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IEFjdGlvbiBzcGVjaWZpZXMgdGhlIGFjdGlvbiB0byBiZSBhcHBsaWVkIG9uIHRoZSBydWxlLgogICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgZW5hYmxlTG9nZ2luZzoKICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBFbmFibGVMb2dnaW5nIGlzIHVzZWQgdG8gaW5kaWNhdGUgaWYgYWdlbnQgc2hvdWxkIGdlbmVyYXRlIGxvZ3Mgd2hlbiBydWxlcyBhcmUgbWF0Y2hlZC4gU2hvdWxkIGJlIGRlZmF1bHQgdG8gZmFsc2UuCiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBib29sZWFuCiAgICAgICAgICAgICAgICAgICAgZnJvbToKICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBSdWxlIGlzIG1hdGNoZWQgaWYgdHJhZmZpYyBvcmlnaW5hdGVzIGZyb20gd29ya2xvYWRzIHNlbGVjdGVkIGJ5IHRoaXMgZmllbGQuIElmIHRoaXMgZmllbGQgaXMgZW1wdHksIHRoaXMgcnVsZSBtYXRjaGVzIGFsbCBzb3VyY2VzLgogICAgICAgICAgICAgICAgICAgICAgaXRlbXM6CiAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgaXBCbG9jazoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBJUEJsb2NrIGRlc2NyaWJlcyB0aGUgSVBBZGRyZXNzZXMvSVBCbG9ja3MgdGhhdCBpcyBtYXRjaGVkIGluIHRvL2Zyb20uIElQQmxvY2sgY2Fubm90IGJlIHNldCBhcyBwYXJ0IG9mIHRoZSBBcHBsaWVkVG8gZmllbGQuIENhbm5vdCBiZSBzZXQgd2l0aCBhbnkgb3RoZXIgc2VsZWN0b3IuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaWRyOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBDSURSIGlzIGEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgSVAgQmxvY2sgVmFsaWQgZXhhbXBsZXMgYXJlICIxOTIuMTY4LjEuMS8yNCIgb3IgIjIwMDE6ZGI5OjovNjQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogRXhjZXB0IGlzIGEgc2xpY2Ugb2YgQ0lEUnMgdGhhdCBzaG91bGQgbm90IGJlIGluY2x1ZGVkIHdpdGhpbiBhbiBJUCBCbG9jayBWYWxpZCBleGFtcGxlcyBhcmUgIjE5Mi4xNjguMS4xLzI0IiBvciAiMjAwMTpkYjk6Oi82NCIgRXhjZXB0IHZhbHVlcyB3aWxsIGJlIHJlamVjdGVkIGlmIHRoZXkgYXJlIG91dHNpZGUgdGhlIENJRFIgcmFuZ2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGFycmF5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlZDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0gY2lkcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZXNwYWNlU2VsZWN0b3I6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaEV4cHJlc3Npb25zOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVyYXRvcjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogb3BlcmF0b3IgcmVwcmVzZW50cyBhIGtleSdzIHJlbGF0aW9uc2hpcCB0byBhIHNldCBvZiB2YWx1ZXMuIFZhbGlkIG9wZXJhdG9ycyBhcmUgSW4sIE5vdEluLCBFeGlzdHMgYW5kIERvZXNOb3RFeGlzdC4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiB2YWx1ZXMgaXMgYW4gYXJyYXkgb2Ygc3RyaW5nIHZhbHVlcy4gSWYgdGhlIG9wZXJhdG9yIGlzIEluIG9yIE5vdEluLCB0aGUgdmFsdWVzIGFycmF5IG11c3QgYmUgbm9uLWVtcHR5LiBJZiB0aGUgb3BlcmF0b3IgaXMgRXhpc3RzIG9yIERvZXNOb3RFeGlzdCwgdGhlIHZhbHVlcyBhcnJheSBtdXN0IGJlIGVtcHR5LiBUaGlzIGFycmF5IGlzIHJlcGxhY2VkIGR1cmluZyBhIHN0cmF0ZWdpYyBtZXJnZSBwYXRjaC4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGFycmF5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlZDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0ga2V5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtIG9wZXJhdG9yCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBhcnJheQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaExhYmVsczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRpdGlvbmFsUHJvcGVydGllczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgcG9kU2VsZWN0b3I6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogU2VsZWN0IFBvZHMgZnJvbSBOZXR3b3JrUG9saWN5J3MgTmFtZXNwYWNlIGFzIHdvcmtsb2FkcyBpbiBBcHBsaWVkVG8vVG8vRnJvbSBmaWVsZHMuIElmIHNldCB3aXRoIE5hbWVzcGFjZVNlbGVjdG9yLCBQb2RzIGFyZSBtYXRjaGVkIGZyb20gTmFtZXNwYWNlcyBtYXRjaGVkIGJ5IHRoZSBOYW1lc3BhY2VTZWxlY3Rvci4gQ2Fubm90IGJlIHNldCB3aXRoIGFueSBvdGhlciBzZWxlY3RvciBleGNlcHQgTmFtZXNwYWNlU2VsZWN0b3IuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaEV4cHJlc3Npb25zOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBtYXRjaEV4cHJlc3Npb25zIGlzIGEgbGlzdCBvZiBsYWJlbCBzZWxlY3RvciByZXF1aXJlbWVudHMuIFRoZSByZXF1aXJlbWVudHMgYXJlIEFORGVkLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVyYXRvcjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogb3BlcmF0b3IgcmVwcmVzZW50cyBhIGtleSdzIHJlbGF0aW9uc2hpcCB0byBhIHNldCBvZiB2YWx1ZXMuIFZhbGlkIG9wZXJhdG9ycyBhcmUgSW4sIE5vdEluLCBFeGlzdHMgYW5kIERvZXNOb3RFeGlzdC4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiB2YWx1ZXMgaXMgYW4gYXJyYXkgb2Ygc3RyaW5nIHZhbHVlcy4gSWYgdGhlIG9wZXJhdG9yIGlzIEluIG9yIE5vdEluLCB0aGUgdmFsdWVzIGFycmF5IG11c3QgYmUgbm9uLWVtcHR5LiBJZiB0aGUgb3BlcmF0b3IgaXMgRXhpc3RzIG9yIERvZXNOb3RFeGlzdCwgdGhlIHZhbHVlcyBhcnJheSBtdXN0IGJlIGVtcHR5LiBUaGlzIGFycmF5IGlzIHJlcGxhY2VkIGR1cmluZyBhIHN0cmF0ZWdpYyBtZXJnZSBwYXRjaC4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGFycmF5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlZDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0ga2V5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtIG9wZXJhdG9yCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBhcnJheQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaExhYmVsczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRpdGlvbmFsUHJvcGVydGllczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgICAgICAgICAgICAgdHlwZTogYXJyYXkKICAgICAgICAgICAgICAgICAgICBwb3J0czoKICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBTZXQgb2YgcG9ydCBhbmQgcHJvdG9jb2wgYWxsb3dlZC9kZW5pZWQgYnkgdGhlIHJ1bGUuIElmIHRoaXMgZmllbGQgaXMgdW5zZXQgb3IgZW1wdHksIHRoaXMgcnVsZSBtYXRjaGVzIGFsbCBwb3J0cy4KICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOgogICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogTmV0d29ya1BvbGljeVBvcnQgZGVzY3JpYmVzIHRoZSBwb3J0IGFuZCBwcm90b2NvbCB0byBtYXRjaCBpbiBhIHJ1bGUuCiAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kUG9ydDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBFbmRQb3J0IGRlZmluZXMgdGhlIGVuZCBvZiB0aGUgcG9ydCByYW5nZSwgYmVpbmcgdGhlIGVuZCBpbmNsdWRlZCB3aXRoaW4gdGhlIHJhbmdlLiBJdCBjYW4gb25seSBiZSBzcGVjaWZpZWQgd2hlbiBhIG51bWVyaWNhbCBgcG9ydGAgaXMgc3BlY2lmaWVkLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0OiBpbnQzMgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogaW50ZWdlcgogICAgICAgICAgICAgICAgICAgICAgICAgIHBvcnQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbnlPZjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0gdHlwZTogaW50ZWdlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLSB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBUaGUgcG9ydCBvbiB0aGUgZ2l2ZW4gcHJvdG9jb2wuIFRoaXMgY2FuIGJlIGVpdGhlciBhIG51bWVyaWNhbCBvciBuYW1lZCBwb3J0IG9uIGEgUG9kLiBJZiB0aGlzIGZpZWxkIGlzIG5vdCBwcm92aWRlZCwgdGhpcyBtYXRjaGVzIGFsbCBwb3J0IG5hbWVzIGFuZCBudW1iZXJzLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgeC1rdWJlcm5ldGVzLWludC1vci1zdHJpbmc6IHRydWUKICAgICAgICAgICAgICAgICAgICAgICAgICBwcm90b2NvbDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IFRDUAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFRoZSBwcm90b2NvbCAoVENQLCBVRFAsIG9yIFNDVFApIHdoaWNoIHRyYWZmaWMgbXVzdCBtYXRjaC4gSWYgbm90IHNwZWNpZmllZCwgdGhpcyBmaWVsZCBkZWZhdWx0cyB0byBUQ1AuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBhcnJheQogICAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICAgIHR5cGU6IGFycmF5CiAgICAgICAgICAgICAgcG9saWN5VHlwZXM6CiAgICAgICAgICAgICAgICBpdGVtczoKICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFBvbGljeSBUeXBlIHN0cmluZyBkZXNjcmliZXMgdGhlIE5ldHdvcmtQb2xpY3kgdHlwZSBUaGlzIHR5cGUgaXMgYmV0YS1sZXZlbCBpbiAxLjgKICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICB0eXBlOiBhcnJheQogICAgICAgICAgICAgIHByaW9yaXR5OgogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFByaW9yaXR5IHNwZWNmaWVzIHRoZSBvcmRlciBvZiB0aGUgTmV0d29ya1BvbGljeSByZWxhdGl2ZSB0byBvdGhlciBOZXR3b3JrUG9saWNpZXMuCiAgICAgICAgICAgICAgICB0eXBlOiBpbnRlZ2VyCiAgICAgICAgICAgICAgdHlwZToKICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiB0eXBlIG9mIHRoZSBwb2xpY3kuCiAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgcmVxdWlyZWQ6CiAgICAgICAgICAgIC0gdHlwZQogICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICByZXF1aXJlZDoKICAgICAgICAtIHNwZWMKICAgICAgICB0eXBlOiBvYmplY3QKICAgIHNlcnZlZDogdHJ1ZQogICAgc3RvcmFnZTogdHJ1ZQpzdGF0dXM6CiAgYWNjZXB0ZWROYW1lczoKICAgIGtpbmQ6ICIiCiAgICBwbHVyYWw6ICIiCiAgY29uZGl0aW9uczogW10KICBzdG9yZWRWZXJzaW9uczogW10KLS0tCmFwaVZlcnNpb246IGFwaWV4dGVuc2lvbnMuazhzLmlvL3YxCmtpbmQ6IEN1c3RvbVJlc291cmNlRGVmaW5pdGlvbgptZXRhZGF0YToKICBuYW1lOiBkbnNuZXR3b3JrcG9saWNpZXMuYWNpLmRuc25ldHBvbApzcGVjOgogIGdyb3VwOiBhY2kuZG5zbmV0cG9sCiAgbmFtZXM6CiAgICBraW5kOiBEbnNOZXR3b3JrUG9saWN5CiAgICBsaXN0S2luZDogRG5zTmV0d29ya1BvbGljeUxpc3QKICAgIHBsdXJhbDogZG5zbmV0d29ya3BvbGljaWVzCiAgICBzaW5ndWxhcjogZG5zbmV0d29ya3BvbGljeQogIHNjb3BlOiBOYW1lc3BhY2VkCiAgdmVyc2lvbnM6CiAgLSBuYW1lOiB2MWJldGEKICAgIHNjaGVtYToKICAgICAgb3BlbkFQSVYzU2NoZW1hOgogICAgICAgIGRlc2NyaXB0aW9uOiBkbnMgbmV0d29yayBQb2xpY3kKICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgYXBpVmVyc2lvbjoKICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICBraW5kOgogICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgIG1ldGFkYXRhOgogICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgIHNwZWM6CiAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgYXBwbGllZFRvOgogICAgICAgICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgICAgICAgbmFtZXNwYWNlU2VsZWN0b3I6CiAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgICAgICAgICAgIG1hdGNoRXhwcmVzc2lvbnM6CiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOgogICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BlcmF0b3I6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogYXJyYXkKICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlZDoKICAgICAgICAgICAgICAgICAgICAgICAgICAtIGtleQogICAgICAgICAgICAgICAgICAgICAgICAgIC0gb3BlcmF0b3IKICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogYXJyYXkKICAgICAgICAgICAgICAgICAgICAgIG1hdGNoTGFiZWxzOgogICAgICAgICAgICAgICAgICAgICAgICBhZGRpdGlvbmFsUHJvcGVydGllczoKICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICAgIHBvZFNlbGVjdG9yOgogICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBhbGxvdyBpbmdyZXNzIGZyb20gdGhlIHNhbWUgbmFtZXNwYWNlCiAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgICAgICAgICAgIG1hdGNoRXhwcmVzc2lvbnM6CiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOgogICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BlcmF0b3I6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBvcGVyYXRvciByZXByZXNlbnRzIGEga2V5J3MgcmVsYXRpb25zaGlwIHRvIGEgc2V0IG9mIHZhbHVlcy4gVmFsaWQgb3BlcmF0b3JzIGFyZSBJbiwgTm90SW4sIEV4aXN0cyBhbmQgRG9lc05vdEV4aXN0LgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IHZhbHVlcyBpcyBhbiBhcnJheSBvZiBzdHJpbmcgdmFsdWVzLiBJZiB0aGUgb3BlcmF0b3IgaXMgSW4gb3IgTm90SW4sIHRoZSB2YWx1ZXMgYXJyYXkgbXVzdCBiZSBub24tZW1wdHkuIElmIHRoZSBvcGVyYXRvciBpcyBFeGlzdHMgb3IgRG9lc05vdEV4aXN0LCB0aGUgdmFsdWVzIGFycmF5IG11c3QgYmUgZW1wdHkuIFRoaXMgYXJyYXkgaXMgcmVwbGFjZWQgZHVyaW5nIGEgc3RyYXRlZ2ljIG1lcmdlIHBhdGNoLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogYXJyYXkKICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlZDoKICAgICAgICAgICAgICAgICAgICAgICAgICAtIGtleQogICAgICAgICAgICAgICAgICAgICAgICAgIC0gb3BlcmF0b3IKICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogYXJyYXkKICAgICAgICAgICAgICAgICAgICAgIG1hdGNoTGFiZWxzOgogICAgICAgICAgICAgICAgICAgICAgICBhZGRpdGlvbmFsUHJvcGVydGllczoKICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICBlZ3Jlc3M6CiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogU2V0IG9mIGVncmVzcyBydWxlcyBldmFsdWF0ZWQgYmFzZWQgb24gdGhlIG9yZGVyIGluIHdoaWNoIHRoZXkgYXJlIHNldC4KICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgIHRvRnFkbjoKICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgICAgICAgbWF0Y2hOYW1lczoKICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGFycmF5CiAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWQ6CiAgICAgICAgICAgICAgICAgICAgLSBtYXRjaE5hbWVzCiAgICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICByZXF1aXJlZDoKICAgICAgICAgICAgICAgIC0gdG9GcWRuCiAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgcmVxdWlyZWQ6CiAgICAgICAgLSBzcGVjCiAgICAgICAgdHlwZTogb2JqZWN0CiAgICBzZXJ2ZWQ6IHRydWUKICAgIHN0b3JhZ2U6IHRydWUKc3RhdHVzOgogIGFjY2VwdGVkTmFtZXM6CiAgICBraW5kOiAiIgogICAgcGx1cmFsOiAiIgogIGNvbmRpdGlvbnM6IFtdCiAgc3RvcmVkVmVyc2lvbnM6IFtdCi0tLQphcGlWZXJzaW9uOiBhcGlleHRlbnNpb25zLms4cy5pby92MQpraW5kOiBDdXN0b21SZXNvdXJjZURlZmluaXRpb24KbWV0YWRhdGE6CiAgbmFtZTogcW9zcG9saWNpZXMuYWNpLnFvcwpzcGVjOgogIGdyb3VwOiBhY2kucW9zCiAgbmFtZXM6CiAgICBraW5kOiBRb3NQb2xpY3kKICAgIGxpc3RLaW5kOiBRb3NQb2xpY3lMaXN0CiAgICBwbHVyYWw6IHFvc3BvbGljaWVzCiAgICBzaW5ndWxhcjogcW9zcG9saWN5CiAgc2NvcGU6IE5hbWVzcGFjZWQKICBwcmVzZXJ2ZVVua25vd25GaWVsZHM6IGZhbHNlCiAgdmVyc2lvbnM6CiAgLSBuYW1lOiB2MQogICAgc2VydmVkOiB0cnVlCiAgICBzdG9yYWdlOiB0cnVlCiAgICBzdWJyZXNvdXJjZXM6CiAgICAgIHN0YXR1czoge30KICAgIHNjaGVtYToKICAgICAgb3BlbkFQSVYzU2NoZW1hOgogICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICBhcGlWZXJzaW9uOgogICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgIGtpbmQ6CiAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgc3BlYzoKICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgcG9kU2VsZWN0b3I6CiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ1NlbGVjdGlvbiBvZiBQb2RzJwogICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgICBtYXRjaExhYmVsczoKICAgICAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjoKICAgICAgICAgICAgICBpbmdyZXNzOgogICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgICBwb2xpY2luZ19yYXRlOgogICAgICAgICAgICAgICAgICAgIHR5cGU6IGludGVnZXIKICAgICAgICAgICAgICAgICAgICBtaW5pbXVtOiAwCiAgICAgICAgICAgICAgICAgIHBvbGljaW5nX2J1cnN0OgogICAgICAgICAgICAgICAgICAgIHR5cGU6IGludGVnZXIKICAgICAgICAgICAgICAgICAgICBtaW5pbXVtOiAwCiAgICAgICAgICAgICAgZWdyZXNzOgogICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgICBwb2xpY2luZ19yYXRlOgogICAgICAgICAgICAgICAgICAgIHR5cGU6IGludGVnZXIKICAgICAgICAgICAgICAgICAgICBtaW5pbXVtOiAwCiAgICAgICAgICAgICAgICAgIHBvbGljaW5nX2J1cnN0OgogICAgICAgICAgICAgICAgICAgIHR5cGU6IGludGVnZXIKICAgICAgICAgICAgICAgICAgICBtaW5pbXVtOiAwCiAgICAgICAgICAgICAgZHNjcG1hcms6CiAgICAgICAgICAgICAgICB0eXBlOiBpbnRlZ2VyCiAgICAgICAgICAgICAgICBkZWZhdWx0OiAwCiAgICAgICAgICAgICAgICBtaW5pbXVtOiAwCiAgICAgICAgICAgICAgICBtYXhpbXVtOiA2MwotLS0KYXBpVmVyc2lvbjogYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEKa2luZDogQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uCm1ldGFkYXRhOgogIG5hbWU6IG5ldGZsb3dwb2xpY2llcy5hY2kubmV0ZmxvdwpzcGVjOgogIGdyb3VwOiBhY2kubmV0ZmxvdwogIG5hbWVzOgogICAga2luZDogTmV0Zmxvd1BvbGljeQogICAgbGlzdEtpbmQ6IE5ldGZsb3dQb2xpY3lMaXN0CiAgICBwbHVyYWw6IG5ldGZsb3dwb2xpY2llcwogICAgc2luZ3VsYXI6IG5ldGZsb3dwb2xpY3kKICBzY29wZTogQ2x1c3RlcgogIHByZXNlcnZlVW5rbm93bkZpZWxkczogZmFsc2UKICB2ZXJzaW9uczoKICAtIG5hbWU6IHYxYWxwaGEKICAgIHNlcnZlZDogdHJ1ZQogICAgc3RvcmFnZTogdHJ1ZQogICAgc2NoZW1hOgogICAjIG9wZW5BUElWM1NjaGVtYSBpcyB0aGUgc2NoZW1hIGZvciB2YWxpZGF0aW5nIGN1c3RvbSBvYmplY3RzLgogICAgICBvcGVuQVBJVjNTY2hlbWE6CiAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgIGFwaVZlcnNpb246CiAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAga2luZDoKICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICBzcGVjOgogICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgICBmbG93U2FtcGxpbmdQb2xpY3k6CiAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgIGRlc3RJcDoKICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgZGVzdFBvcnQ6CiAgICAgICAgICAgICAgICAgICAgdHlwZTogaW50ZWdlcgogICAgICAgICAgICAgICAgICAgIG1pbmltdW06IDAKICAgICAgICAgICAgICAgICAgICBtYXhpbXVtOiA2NTUzNQogICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IDIwNTUKICAgICAgICAgICAgICAgICAgZmxvd1R5cGU6CiAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgZW51bToKICAgICAgICAgICAgICAgICAgICAgIC0gbmV0ZmxvdwogICAgICAgICAgICAgICAgICAgICAgLSBpcGZpeAogICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IG5ldGZsb3cKICAgICAgICAgICAgICAgICAgYWN0aXZlRmxvd1RpbWVPdXQ6CiAgICAgICAgICAgICAgICAgICAgdHlwZTogaW50ZWdlcgogICAgICAgICAgICAgICAgICAgIG1pbmltdW06IDAKICAgICAgICAgICAgICAgICAgICBtYXhpbXVtOiAzNjAwCiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogNjAKICAgICAgICAgICAgICAgICAgaWRsZUZsb3dUaW1lT3V0OgogICAgICAgICAgICAgICAgICAgIHR5cGU6IGludGVnZXIKICAgICAgICAgICAgICAgICAgICBtaW5pbXVtOiAwCiAgICAgICAgICAgICAgICAgICAgbWF4aW11bTogNjAwCiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogMTUKICAgICAgICAgICAgICAgICAgc2FtcGxpbmdSYXRlOgogICAgICAgICAgICAgICAgICAgIHR5cGU6IGludGVnZXIKICAgICAgICAgICAgICAgICAgICBtaW5pbXVtOiAwCiAgICAgICAgICAgICAgICAgICAgbWF4aW11bTogMTAwMAogICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IDAKICAgICAgICAgICAgICAgIHJlcXVpcmVkOgogICAgICAgICAgICAgICAgLSBkZXN0SXAKICAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdAotLS0KYXBpVmVyc2lvbjogYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEKa2luZDogQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uCm1ldGFkYXRhOgogIG5hbWU6IGVyc3BhbnBvbGljaWVzLmFjaS5lcnNwYW4Kc3BlYzoKICBncm91cDogYWNpLmVyc3BhbgogIG5hbWVzOgogICAga2luZDogRXJzcGFuUG9saWN5CiAgICBsaXN0S2luZDogRXJzcGFuUG9saWN5TGlzdAogICAgcGx1cmFsOiBlcnNwYW5wb2xpY2llcwogICAgc2luZ3VsYXI6IGVyc3BhbnBvbGljeQogIHNjb3BlOiBDbHVzdGVyCiAgcHJlc2VydmVVbmtub3duRmllbGRzOiBmYWxzZQogIHZlcnNpb25zOgogIC0gbmFtZTogdjFhbHBoYQogICAgc2VydmVkOiB0cnVlCiAgICBzdG9yYWdlOiB0cnVlCiAgICBzY2hlbWE6CiAgICAgIG9wZW5BUElWM1NjaGVtYToKICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgYXBpVmVyc2lvbjoKICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICBraW5kOgogICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgIHNwZWM6CiAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgIHNlbGVjdG9yOgogICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ1NlbGVjdGlvbiBvZiBQb2RzJwogICAgICAgICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgICAgICAgbGFiZWxzOgogICAgICAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgYWRkaXRpb25hbFByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgbmFtZXNwYWNlOgogICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgIHNvdXJjZToKICAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgICAgICAgYWRtaW5TdGF0ZToKICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogQWRtaW5pc3RyYXRpdmUgc3RhdGUuCiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogc3RhcnQKICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICBlbnVtOgogICAgICAgICAgICAgICAgICAgICAgLSBzdGFydAogICAgICAgICAgICAgICAgICAgICAgLSBzdG9wCiAgICAgICAgICAgICAgICAgIGRpcmVjdGlvbjoKICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogRGlyZWN0aW9uIG9mIHRoZSBwYWNrZXRzIHRvIG1vbml0b3IuCiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogYm90aAogICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgIGVudW06CiAgICAgICAgICAgICAgICAgICAgICAtIGluCiAgICAgICAgICAgICAgICAgICAgICAtIG91dAogICAgICAgICAgICAgICAgICAgICAgLSBib3RoCiAgICAgICAgICAgICAgZGVzdGluYXRpb246CiAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgIGRlc3RJUDoKICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogRGVzdGluYXRpb24gSVAgb2YgdGhlIEVSU1BBTiBwYWNrZXQuCiAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgIGZsb3dJRDoKICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogVW5pcXVlIGZsb3cgSUQgb2YgdGhlIEVSU1BBTiBwYWNrZXQuCiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogMQogICAgICAgICAgICAgICAgICAgIHR5cGU6IGludGVnZXIKICAgICAgICAgICAgICAgICAgICBtaW5pbXVtOiAxCiAgICAgICAgICAgICAgICAgICAgbWF4aW11bTogMTAyMwogICAgICAgICAgICAgICAgcmVxdWlyZWQ6CiAgICAgICAgICAgICAgICAtIGRlc3RJUAogICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0Ci0tLQphcGlWZXJzaW9uOiBhcGlleHRlbnNpb25zLms4cy5pby92MQpraW5kOiBDdXN0b21SZXNvdXJjZURlZmluaXRpb24KbWV0YWRhdGE6CiAgbmFtZTogZW5hYmxlZHJvcGxvZ3MuYWNpLmRyb3Bsb2cKc3BlYzoKICBncm91cDogYWNpLmRyb3Bsb2cKICBuYW1lczoKICAgIGtpbmQ6IEVuYWJsZURyb3BMb2cKICAgIGxpc3RLaW5kOiBFbmFibGVEcm9wTG9nTGlzdAogICAgcGx1cmFsOiBlbmFibGVkcm9wbG9ncwogICAgc2luZ3VsYXI6IGVuYWJsZWRyb3Bsb2cKICBzY29wZTogQ2x1c3RlcgogIHZlcnNpb25zOgogIC0gbmFtZTogdjFhbHBoYTEKICAgIHNlcnZlZDogdHJ1ZQogICAgc3RvcmFnZTogdHJ1ZQogICAgc2NoZW1hOgogICAjIG9wZW5BUElWM1NjaGVtYSBpcyB0aGUgc2NoZW1hIGZvciB2YWxpZGF0aW5nIGN1c3RvbSBvYmplY3RzLgogICAgICBvcGVuQVBJVjNTY2hlbWE6CiAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgIGFwaVZlcnNpb246CiAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAga2luZDoKICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICBzcGVjOgogICAgICAgICAgICBkZXNjcmlwdGlvbjogRGVmaW5lcyB0aGUgZGVzaXJlZCBzdGF0ZSBvZiBFbmFibGVEcm9wTG9nCiAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgIGRpc2FibGVEZWZhdWx0RHJvcExvZzoKICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBEaXNhYmxlcyB0aGUgZGVmYXVsdCBkcm9wbG9nIGVuYWJsZWQgYnkgYWNjLXByb3Zpc2lvbi4KICAgICAgICAgICAgICAgIGRlZmF1bHQ6IGZhbHNlCiAgICAgICAgICAgICAgICB0eXBlOiBib29sZWFuCiAgICAgICAgICAgICAgbm9kZVNlbGVjdG9yOgogICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogRHJvcCBsb2dnaW5nIGlzIGVuYWJsZWQgb24gbm9kZXMgc2VsZWN0ZWQgYmFzZWQgb24gbGFiZWxzCiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgICBsYWJlbHM6CiAgICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgICAgICAgICBhZGRpdGlvbmFsUHJvcGVydGllczoKICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwotLS0KYXBpVmVyc2lvbjogYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEKa2luZDogQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uCm1ldGFkYXRhOgogIG5hbWU6IHBydW5lZHJvcGxvZ3MuYWNpLmRyb3Bsb2cKc3BlYzoKICBncm91cDogYWNpLmRyb3Bsb2cKICBuYW1lczoKICAgIGtpbmQ6IFBydW5lRHJvcExvZwogICAgbGlzdEtpbmQ6IFBydW5lRHJvcExvZ0xpc3QKICAgIHBsdXJhbDogcHJ1bmVkcm9wbG9ncwogICAgc2luZ3VsYXI6IHBydW5lZHJvcGxvZwogIHNjb3BlOiBDbHVzdGVyCiAgdmVyc2lvbnM6CiAgLSBuYW1lOiB2MWFscGhhMQogICAgc2VydmVkOiB0cnVlCiAgICBzdG9yYWdlOiB0cnVlCiAgICBzY2hlbWE6CiAgICMgb3BlbkFQSVYzU2NoZW1hIGlzIHRoZSBzY2hlbWEgZm9yIHZhbGlkYXRpbmcgY3VzdG9tIG9iamVjdHMuCiAgICAgIG9wZW5BUElWM1NjaGVtYToKICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgYXBpVmVyc2lvbjoKICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICBraW5kOgogICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgIHNwZWM6CiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBEZWZpbmVzIHRoZSBkZXNpcmVkIHN0YXRlIG9mIFBydW5lRHJvcExvZwogICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgICBub2RlU2VsZWN0b3I6CiAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBEcm9wIGxvZ2dpbmcgZmlsdGVycyBhcmUgYXBwbGllZCB0byBub2RlcyBzZWxlY3RlZCBiYXNlZCBvbiBsYWJlbHMKICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgIGxhYmVsczoKICAgICAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgICAgIGFkZGl0aW9uYWxQcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgZHJvcExvZ0ZpbHRlcnM6CiAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgIHNyY0lQOgogICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICBkZXN0SVA6CiAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgIHNyY01BQzoKICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgZGVzdE1BQzoKICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgc3JjUG9ydDoKICAgICAgICAgICAgICAgICAgICB0eXBlOiBpbnRlZ2VyCiAgICAgICAgICAgICAgICAgIGRlc3RQb3J0OgogICAgICAgICAgICAgICAgICAgIHR5cGU6IGludGVnZXIKICAgICAgICAgICAgICAgICAgaXBQcm90bzoKICAgICAgICAgICAgICAgICAgICB0eXBlOiBpbnRlZ2VyCi0tLQphcGlWZXJzaW9uOiB2MQpraW5kOiBDb25maWdNYXAKbWV0YWRhdGE6CiAgbmFtZTogYWNpLWNvbnRhaW5lcnMtY29uZmlnCiAgbmFtZXNwYWNlOiBhY2ktY29udGFpbmVycy1zeXN0ZW0KICBsYWJlbHM6CiAgICBhY2ktY29udGFpbmVycy1jb25maWctdmVyc2lvbjogIjY1YTYxNjg2LWEwM2UtNDEwNS1hZGZkLThhNTlhM2FlYjgwMCIKICAgIG5ldHdvcmstcGx1Z2luOiBhY2ktY29udGFpbmVycwpkYXRhOgogIGNvbnRyb2xsZXItY29uZmlnOiB8LQogICAgewogICAgICAgICJmbGF2b3IiOiAib3BlbnNoaWZ0LTQuMTAtZXN4IiwKICAgICAgICAibG9nLWxldmVsIjogImRlYnVnIiwKICAgICAgICAiYXBpYy1ob3N0cyI6IFsKICAgICAgICAgICAgIjEwLjMwLjEyMC42MSIKICAgICAgICBdLAogICAgICAgICJhcGljLXVzZXJuYW1lIjogIm9jcDQxMGJmdGVzdCIsCiAgICAgICAgImFwaWMtcHJpdmF0ZS1rZXktcGF0aCI6ICIvdXNyL2xvY2FsL2V0Yy9hY2ktY2VydC91c2VyLmtleSIsCiAgICAgICAgImFjaS1wcmVmaXgiOiAib2NwNDEwYmZ0ZXN0IiwKICAgICAgICAiYWNpLXZtbS10eXBlIjogIk9wZW5TaGlmdCIsCiAgICAgICAgImFjaS12bW0tZG9tYWluIjogIm9jcDQxMGJmdGVzdCIsCiAgICAgICAgImFjaS12bW0tY29udHJvbGxlciI6ICJvY3A0MTBiZnRlc3QiLAogICAgICAgICJhY2ktcG9saWN5LXRlbmFudCI6ICJvY3A0MTBiZnRlc3QiLAogICAgICAgICJhY2ktcG9kYmQtZG4iOiAidW5pL3RuLW9jcDQxMGJmdGVzdC9CRC1hY2ktY29udGFpbmVycy1vY3A0MTBiZnRlc3QtcG9kLWJkIiwKICAgICAgICAiYWNpLW5vZGViZC1kbiI6ICJ1bmkvdG4tb2NwNDEwYmZ0ZXN0L0JELWFjaS1jb250YWluZXJzLW9jcDQxMGJmdGVzdC1ub2RlLWJkIiwKICAgICAgICAiYWNpLXNlcnZpY2UtcGh5cy1kb20iOiAib2NwNDEwYmZ0ZXN0LXBkb20iLAogICAgICAgICJhY2ktc2VydmljZS1lbmNhcCI6ICJ2bGFuLTIwMSIsCiAgICAgICAgImFjaS1zZXJ2aWNlLW1vbml0b3ItaW50ZXJ2YWwiOiA1LAogICAgICAgICJhY2ktcGJyLXRyYWNraW5nLW5vbi1zbmF0IjogZmFsc2UsCiAgICAgICAgImFjaS12cmYtdGVuYW50IjogImNvbW1vbiIsCiAgICAgICAgImFjaS12cmYtZG4iOiAidW5pL3RuLWNvbW1vbi9jdHgtb2NwNDEwX2JmX3ZyZiIsCiAgICAgICAgImFjaS1sM291dCI6ICJvY3A0MTBfYmZfbDNvdXQiLAogICAgICAgICJhY2ktZXh0LW5ldHdvcmtzIjogWwogICAgICAgICAgICAib2NwLWJmLWwzLWV4dGVwZyIKICAgICAgICBdLAogICAgICAgICJhY2ktdnJmIjogIm9jcDQxMF9iZl92cmYiLAogICAgICAgICJkZWZhdWx0LWVuZHBvaW50LWdyb3VwIjogewogICAgICAgICAgICAicG9saWN5LXNwYWNlIjogIm9jcDQxMGJmdGVzdCIsCiAgICAgICAgICAgICJuYW1lIjogImFjaS1jb250YWluZXJzLW9jcDQxMGJmdGVzdHxhY2ktY29udGFpbmVycy1kZWZhdWx0IgogICAgICAgIH0sCiAgICAgICAgIm1heC1ub2Rlcy1zdmMtZ3JhcGgiOiAzMiwKICAgICAgICAibmFtZXNwYWNlLWRlZmF1bHQtZW5kcG9pbnQtZ3JvdXAiOiB7CiAgICAgICAgICAgICJhY2ktY29udGFpbmVycy1zeXN0ZW0iOiB7CiAgICAgICAgICAgICAgICAicG9saWN5LXNwYWNlIjogIm9jcDQxMGJmdGVzdCIsCiAgICAgICAgICAgICAgICAibmFtZSI6ICJhY2ktY29udGFpbmVycy1vY3A0MTBiZnRlc3R8YWNpLWNvbnRhaW5lcnMtc3lzdGVtIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiaXN0aW8tb3BlcmF0b3IiOiB7CiAgICAgICAgICAgICAgICAicG9saWN5LXNwYWNlIjogIm9jcDQxMGJmdGVzdCIsCiAgICAgICAgICAgICAgICAibmFtZSI6ICJhY2ktY29udGFpbmVycy1vY3A0MTBiZnRlc3R8YWNpLWNvbnRhaW5lcnMtaXN0aW8iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJpc3Rpby1zeXN0ZW0iOiB7CiAgICAgICAgICAgICAgICAicG9saWN5LXNwYWNlIjogIm9jcDQxMGJmdGVzdCIsCiAgICAgICAgICAgICAgICAibmFtZSI6ICJhY2ktY29udGFpbmVycy1vY3A0MTBiZnRlc3R8YWNpLWNvbnRhaW5lcnMtaXN0aW8iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJrdWJlLXNlcnZpY2UtY2F0YWxvZyI6IHsKICAgICAgICAgICAgICAgICJwb2xpY3ktc3BhY2UiOiAib2NwNDEwYmZ0ZXN0IiwKICAgICAgICAgICAgICAgICJuYW1lIjogImFjaS1jb250YWluZXJzLW9jcDQxMGJmdGVzdHxhY2ktY29udGFpbmVycy1zeXN0ZW0iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJrdWJlLXN5c3RlbSI6IHsKICAgICAgICAgICAgICAgICJwb2xpY3ktc3BhY2UiOiAib2NwNDEwYmZ0ZXN0IiwKICAgICAgICAgICAgICAgICJuYW1lIjogImFjaS1jb250YWluZXJzLW9jcDQxMGJmdGVzdHxhY2ktY29udGFpbmVycy1zeXN0ZW0iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJvcGVuc2hpZnQtYXV0aGVudGljYXRpb24iOiB7CiAgICAgICAgICAgICAgICAicG9saWN5LXNwYWNlIjogIm9jcDQxMGJmdGVzdCIsCiAgICAgICAgICAgICAgICAibmFtZSI6ICJhY2ktY29udGFpbmVycy1vY3A0MTBiZnRlc3R8YWNpLWNvbnRhaW5lcnMtc3lzdGVtIgogICAgICAgICAgICB9LAogICAgICAgICAgICAib3BlbnNoaWZ0LWF1dGhlbnRpY2F0aW9uLW9wZXJhdG9yIjogewogICAgICAgICAgICAgICAgInBvbGljeS1zcGFjZSI6ICJvY3A0MTBiZnRlc3QiLAogICAgICAgICAgICAgICAgIm5hbWUiOiAiYWNpLWNvbnRhaW5lcnMtb2NwNDEwYmZ0ZXN0fGFjaS1jb250YWluZXJzLXN5c3RlbSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgIm9wZW5zaGlmdC1jb25zb2xlIjogewogICAgICAgICAgICAgICAgInBvbGljeS1zcGFjZSI6ICJvY3A0MTBiZnRlc3QiLAogICAgICAgICAgICAgICAgIm5hbWUiOiAiYWNpLWNvbnRhaW5lcnMtb2NwNDEwYmZ0ZXN0fGFjaS1jb250YWluZXJzLXN5c3RlbSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgIm9wZW5zaGlmdC1kbnMiOiB7CiAgICAgICAgICAgICAgICAicG9saWN5LXNwYWNlIjogIm9jcDQxMGJmdGVzdCIsCiAgICAgICAgICAgICAgICAibmFtZSI6ICJhY2ktY29udGFpbmVycy1vY3A0MTBiZnRlc3R8YWNpLWNvbnRhaW5lcnMtc3lzdGVtIgogICAgICAgICAgICB9LAogICAgICAgICAgICAib3BlbnNoaWZ0LW1vbml0b3JpbmciOiB7CiAgICAgICAgICAgICAgICAicG9saWN5LXNwYWNlIjogIm9jcDQxMGJmdGVzdCIsCiAgICAgICAgICAgICAgICAibmFtZSI6ICJhY2ktY29udGFpbmVycy1vY3A0MTBiZnRlc3R8YWNpLWNvbnRhaW5lcnMtc3lzdGVtIgogICAgICAgICAgICB9LAogICAgICAgICAgICAib3BlbnNoaWZ0LXdlYi1jb25zb2xlIjogewogICAgICAgICAgICAgICAgInBvbGljeS1zcGFjZSI6ICJvY3A0MTBiZnRlc3QiLAogICAgICAgICAgICAgICAgIm5hbWUiOiAiYWNpLWNvbnRhaW5lcnMtb2NwNDEwYmZ0ZXN0fGFjaS1jb250YWluZXJzLXN5c3RlbSIKICAgICAgICAgICAgfSAgICAgICAgfSwKICAgICAgICAic2VydmljZS1pcC1wb29sIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiZW5kIjogIjEwLjMuMC4yNTQiLAogICAgICAgICAgICAgICAgInN0YXJ0IjogIjEwLjMuMC4yIgogICAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAiZXh0ZXJuLXN0YXRpYyI6ICIxMC40LjAuMS8yNCIsCiAgICAgICAgImV4dGVybi1keW5hbWljIjogIjEwLjMuMC4xLzI0IiwKICAgICAgICAic25hdC1jb250cmFjdC1zY29wZSI6ICJnbG9iYWwiLAogICAgICAgICJzdGF0aWMtc2VydmljZS1pcC1wb29sIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiZW5kIjogIjEwLjQuMC4yNTQiLAogICAgICAgICAgICAgICAgInN0YXJ0IjogIjEwLjQuMC4yIgogICAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAicG9kLWlwLXBvb2wiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJlbmQiOiAiMTAuMi4yNTUuMjU0IiwKICAgICAgICAgICAgICAgICJzdGFydCI6ICIxMC4yLjAuMiIKICAgICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgInBvZC1zdWJuZXQtY2h1bmstc2l6ZSI6IDMyLAogICAgICAgICJub2RlLXNlcnZpY2UtaXAtcG9vbCI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImVuZCI6ICIxMC41LjAuMjU0IiwKICAgICAgICAgICAgICAgICJzdGFydCI6ICIxMC41LjAuMiIKICAgICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgIm5vZGUtc2VydmljZS1zdWJuZXRzIjogWwogICAgICAgICAgICAiMTAuNS4wLjEvMjQiCiAgICAgICAgXQogICAgfQogIGhvc3QtYWdlbnQtY29uZmlnOiB8LQogICAgewogICAgICAgICJmbGF2b3IiOiAib3BlbnNoaWZ0LTQuMTAtZXN4IiwKICAgICAgICAiYXBwLXByb2ZpbGUiOiAiYWNpLWNvbnRhaW5lcnMtb2NwNDEwYmZ0ZXN0IiwKICAgICAgICAib3BmbGV4LW1vZGUiOiBudWxsLAogICAgICAgICJsb2ctbGV2ZWwiOiAiZGVidWciLAogICAgICAgICJhY2ktc25hdC1uYW1lc3BhY2UiOiAiYWNpLWNvbnRhaW5lcnMtc3lzdGVtIiwKICAgICAgICAiYWNpLXZtbS10eXBlIjogIk9wZW5TaGlmdCIsCiAgICAgICAgImFjaS12bW0tZG9tYWluIjogIm9jcDQxMGJmdGVzdCIsCiAgICAgICAgImFjaS12bW0tY29udHJvbGxlciI6ICJvY3A0MTBiZnRlc3QiLAogICAgICAgICJpbnN0YWxsZXItcHJvdmlzaW9uZWQtbGItaXAiOiAiMTkyLjE2OC4xLjIiLAogICAgICAgICJhY2ktcHJlZml4IjogIm9jcDQxMGJmdGVzdCIsCiAgICAgICAgImFjaS12cmYiOiAib2NwNDEwX2JmX3ZyZiIsCiAgICAgICAgImFjaS12cmYtdGVuYW50IjogImNvbW1vbiIsCiAgICAgICAgInNlcnZpY2UtdmxhbiI6IDIwMSwKICAgICAgICAia3ViZWFwaS12bGFuIjogMjAwLAogICAgICAgICJwb2Qtc3VibmV0IjogIjEwLjIuMC4xLzE2IiwKICAgICAgICAibm9kZS1zdWJuZXQiOiAiMTkyLjE2OC4xLjEvMjQiLAogICAgICAgICJlbmNhcC10eXBlIjogInZ4bGFuIiwKICAgICAgICAiYWNpLWluZnJhLXZsYW4iOiA0MDkzLAogICAgICAgICJjbmktbmV0Y29uZmlnIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiZ2F0ZXdheSI6ICIxMC4yLjAuMSIsCiAgICAgICAgICAgICAgICAicm91dGVzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgImRzdCI6ICIwLjAuMC4wLzAiLAogICAgICAgICAgICAgICAgICAgICAgICAiZ3ciOiAiMTAuMi4wLjEiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICJzdWJuZXQiOiAiMTAuMi4wLjAvMTYiCiAgICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJkZWZhdWx0LWVuZHBvaW50LWdyb3VwIjogewogICAgICAgICAgICAicG9saWN5LXNwYWNlIjogIm9jcDQxMGJmdGVzdCIsCiAgICAgICAgICAgICJuYW1lIjogImFjaS1jb250YWluZXJzLW9jcDQxMGJmdGVzdHxhY2ktY29udGFpbmVycy1kZWZhdWx0IgogICAgICAgIH0sCiAgICAgICAgIm5hbWVzcGFjZS1kZWZhdWx0LWVuZHBvaW50LWdyb3VwIjogewogICAgICAgICAgICAiYWNpLWNvbnRhaW5lcnMtc3lzdGVtIjogewogICAgICAgICAgICAgICAgInBvbGljeS1zcGFjZSI6ICJvY3A0MTBiZnRlc3QiLAogICAgICAgICAgICAgICAgIm5hbWUiOiAiYWNpLWNvbnRhaW5lcnMtb2NwNDEwYmZ0ZXN0fGFjaS1jb250YWluZXJzLXN5c3RlbSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImlzdGlvLW9wZXJhdG9yIjogewogICAgICAgICAgICAgICAgInBvbGljeS1zcGFjZSI6ICJvY3A0MTBiZnRlc3QiLAogICAgICAgICAgICAgICAgIm5hbWUiOiAiYWNpLWNvbnRhaW5lcnMtb2NwNDEwYmZ0ZXN0fGFjaS1jb250YWluZXJzLWlzdGlvIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiaXN0aW8tc3lzdGVtIjogewogICAgICAgICAgICAgICAgInBvbGljeS1zcGFjZSI6ICJvY3A0MTBiZnRlc3QiLAogICAgICAgICAgICAgICAgIm5hbWUiOiAiYWNpLWNvbnRhaW5lcnMtb2NwNDEwYmZ0ZXN0fGFjaS1jb250YWluZXJzLWlzdGlvIgogICAgICAgICAgICB9LAogICAgICAgICAgICAia3ViZS1zZXJ2aWNlLWNhdGFsb2ciOiB7CiAgICAgICAgICAgICAgICAicG9saWN5LXNwYWNlIjogIm9jcDQxMGJmdGVzdCIsCiAgICAgICAgICAgICAgICAibmFtZSI6ICJhY2ktY29udGFpbmVycy1vY3A0MTBiZnRlc3R8YWNpLWNvbnRhaW5lcnMtc3lzdGVtIgogICAgICAgICAgICB9LAogICAgICAgICAgICAia3ViZS1zeXN0ZW0iOiB7CiAgICAgICAgICAgICAgICAicG9saWN5LXNwYWNlIjogIm9jcDQxMGJmdGVzdCIsCiAgICAgICAgICAgICAgICAibmFtZSI6ICJhY2ktY29udGFpbmVycy1vY3A0MTBiZnRlc3R8YWNpLWNvbnRhaW5lcnMtc3lzdGVtIgogICAgICAgICAgICB9LAogICAgICAgICAgICAib3BlbnNoaWZ0LWF1dGhlbnRpY2F0aW9uIjogewogICAgICAgICAgICAgICAgInBvbGljeS1zcGFjZSI6ICJvY3A0MTBiZnRlc3QiLAogICAgICAgICAgICAgICAgIm5hbWUiOiAiYWNpLWNvbnRhaW5lcnMtb2NwNDEwYmZ0ZXN0fGFjaS1jb250YWluZXJzLXN5c3RlbSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgIm9wZW5zaGlmdC1hdXRoZW50aWNhdGlvbi1vcGVyYXRvciI6IHsKICAgICAgICAgICAgICAgICJwb2xpY3ktc3BhY2UiOiAib2NwNDEwYmZ0ZXN0IiwKICAgICAgICAgICAgICAgICJuYW1lIjogImFjaS1jb250YWluZXJzLW9jcDQxMGJmdGVzdHxhY2ktY29udGFpbmVycy1zeXN0ZW0iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJvcGVuc2hpZnQtY29uc29sZSI6IHsKICAgICAgICAgICAgICAgICJwb2xpY3ktc3BhY2UiOiAib2NwNDEwYmZ0ZXN0IiwKICAgICAgICAgICAgICAgICJuYW1lIjogImFjaS1jb250YWluZXJzLW9jcDQxMGJmdGVzdHxhY2ktY29udGFpbmVycy1zeXN0ZW0iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJvcGVuc2hpZnQtZG5zIjogewogICAgICAgICAgICAgICAgInBvbGljeS1zcGFjZSI6ICJvY3A0MTBiZnRlc3QiLAogICAgICAgICAgICAgICAgIm5hbWUiOiAiYWNpLWNvbnRhaW5lcnMtb2NwNDEwYmZ0ZXN0fGFjaS1jb250YWluZXJzLXN5c3RlbSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgIm9wZW5zaGlmdC1tb25pdG9yaW5nIjogewogICAgICAgICAgICAgICAgInBvbGljeS1zcGFjZSI6ICJvY3A0MTBiZnRlc3QiLAogICAgICAgICAgICAgICAgIm5hbWUiOiAiYWNpLWNvbnRhaW5lcnMtb2NwNDEwYmZ0ZXN0fGFjaS1jb250YWluZXJzLXN5c3RlbSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgIm9wZW5zaGlmdC13ZWItY29uc29sZSI6IHsKICAgICAgICAgICAgICAgICJwb2xpY3ktc3BhY2UiOiAib2NwNDEwYmZ0ZXN0IiwKICAgICAgICAgICAgICAgICJuYW1lIjogImFjaS1jb250YWluZXJzLW9jcDQxMGJmdGVzdHxhY2ktY29udGFpbmVycy1zeXN0ZW0iCiAgICAgICAgICAgIH0gICAgICAgIH0sCiAgICAgICAgImVuYWJsZS1kcm9wLWxvZyI6IHRydWUsCiAgICAgICAgImVuYWJsZS1ub2RlcG9kaWYiOiBmYWxzZSwKICAgICAgICAiZW5hYmxlLW92cy1ody1vZmZsb2FkIjogZmFsc2UKICAgIH0KICBvcGZsZXgtYWdlbnQtY29uZmlnOiB8LQogICAgewogICAgICAgICJsb2ciOiB7CiAgICAgICAgICAgICJsZXZlbCI6ICJkZWJ1ZyIKICAgICAgICB9LAogICAgICAgICJvcGZsZXgiOiB7CiAgICAgICAgICAgICJub3RpZiIgOiB7ICJlbmFibGVkIiA6ICJmYWxzZSIgfQogICAgICAgIH0sCiAgICAgICAgInByb21ldGhldXMiOiB7CiAgICAgICAgICAgICJlbmFibGVkIjogImZhbHNlIgogICAgICAgIH0KICAgIH0KLS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IENvbmZpZ01hcAptZXRhZGF0YToKICBuYW1lOiBzbmF0LW9wZXJhdG9yLWNvbmZpZwogIG5hbWVzcGFjZTogYWNpLWNvbnRhaW5lcnMtc3lzdGVtCiAgbGFiZWxzOgogICAgYWNpLWNvbnRhaW5lcnMtY29uZmlnLXZlcnNpb246ICI2NWE2MTY4Ni1hMDNlLTQxMDUtYWRmZC04YTU5YTNhZWI4MDAiCiAgICBuZXR3b3JrLXBsdWdpbjogYWNpLWNvbnRhaW5lcnMKZGF0YToKICAgICJzdGFydCI6ICI1MDAwIgogICAgImVuZCI6ICI2NTAwMCIKICAgICJwb3J0cy1wZXItbm9kZSI6ICIzMDAwIgotLS0KYXBpVmVyc2lvbjogdjEKa2luZDogU2VjcmV0Cm1ldGFkYXRhOgogIG5hbWU6IGFjaS11c2VyLWNlcnQKICBuYW1lc3BhY2U6IGFjaS1jb250YWluZXJzLXN5c3RlbQogIGxhYmVsczoKICAgIGFjaS1jb250YWluZXJzLWNvbmZpZy12ZXJzaW9uOiAiNjVhNjE2ODYtYTAzZS00MTA1LWFkZmQtOGE1OWEzYWViODAwIgpkYXRhOgogIHVzZXIua2V5OiBMUzB0TFMxQ1JVZEpUaUJRVWtsV1FWUkZJRXRGV1MwdExTMHRDazFKU1VOa1owbENRVVJCVGtKbmEzRm9hMmxIT1hjd1FrRlJSVVpCUVZORFFXMUJkMmRuU21OQlowVkJRVzlIUWtGTGVHVlJSRlJ5YzJaek5uSlNjMElLVFdGWVFWZzBOVlp2Wm04eVRtRnNSVlZ3Y1M5WVQwdHpPVkpqZVVSQk1EaExOemQ2TUc4elZEbFNNVVZ4TUZKM05XbHBlbFpMV25RdmFVeFJjbXhyTmdwTWNWQXdUMWR2ZDNkeGFWcDZSbXRGSzBSSGFFZGhTVGhXSzFaQk5UTkRjbGRNY0VNNFQxWnBSazVxZDFZNFNGRk5WbVExVEZCd2RYSm5ORXhzTUVWbkNuQTVkMmsyZEVSa1JUbFpOMGxtZFZvMk4wTlpXRWRCVWl0b1FUZEJaMDFDUVVGRlEyZFpRVGxDUzBJeVJ6TnVSMFprT1hoNk9YQnFZM1JhWnpkTEswc0taeXRaTjBwYVUxbGpNbGhQVjB0MmNYRnBlbUZCY0V3MU5XaGhSRmh4VmtjeGVXaEtPR2t5U0N0MlVHTmtkRTluVURNNU5ERnlMM05EYldwSlQySlFaQXBCTkhOSWF6ZGlRa2hEZFZwR1ZuZ3dWaXN6VWxsM1puRXJiVkpDVERGeksyMTFSVkZDTjNkT1MxVnhNazFsVkdKMFpra3hOWFJaYUZsUWFYTm9SRzlyQ2tRNFptaFJlRTB3V1dWVU9HTnRWRXBCVVVwQ1FVNHZZV0pMUlZCcVVsZEZaRTVTVUdSa1RXbDBiakJqTW1aV1pYUXpXVmhFTUU1S0swUnRVelJLVjNZS04wODNlRGxpZG1kcVlYRkZZM014YzA1a2RFUXdWRWRGWlZkc1RWVlplRXhCUldFeFJ6TkNXWE5XWTBOUlVVUkdTSGhHV0ZJNGRucEJSMVptTlUxYVlRcG1hWE5EVWtVMU9UWkVUMEYzTHpSdldGb3hhRlZzY1ZwWE1tUk9iR2d2YzNoRGRYaEZkMlJCV1hORVkxZ3JRa2hPU1ZsR09XeERXVFJNU0dGQ2ExWjFDbmhTVnpsQmEwVkJNaTlUTkVGS2NGUlBkVEZ2UkhGWU1WWklNSEpoTUhoTFRHNTJaazFVTXk5V1ZrdzVaMVJVT1ZWS1owazJPVVE0WTBwME5VZEVRVVVLZW1sNWFIcHpNbGxhUm5WVVNWSkNTVzlPTW1oaE9XcFNSMVprVGtOUlNrRlNkVk12YUdSYWNXZFZRelZPVGpOQloweGplbTVMVFZsWU5uWjBTMlpvVkFwS1p6RldSbkpXV25CRFNEbGhlV1k0TXpGb1IwcHRPR3BuYjB0Q2RtdEJNVVo1WWt0MFRWazNaMnd2T1ZaME5DdG9ia2xZVDFGS1FXVXlhVlJ5TkhGV0NrVnNZMGhQV1dsMVdGQTVZWE1yTlVwd2FuVkhjV05XUkRaRmVYSldSRzlYUkVkcmVrZENNV3BqUXpaTlJsVkNhaTlTUkhCdVFuWklTbTFvVld0WFRUZ0tiRmxxTVU1alRWVm9ValpvTmxFOVBRb3RMUzB0TFVWT1JDQlFVa2xXUVZSRklFdEZXUzB0TFMwdENnPT0KICB1c2VyLmNydDogTFMwdExTMUNSVWRKVGlCRFJWSlVTVVpKUTBGVVJTMHRMUzB0Q2sxSlNVSTRha05EUVZaelEwRm5VRzlOUVRCSFExTnhSMU5KWWpORVVVVkNRbEZWUVUxRlJYaERla0ZLUW1kT1ZrSkJXVlJCYkZaVVRWSlpkMFpCV1VRS1ZsRlJTMFJCTVVSaFdFNXFZbmxDVkdWWVRqQmFWekY2VFZKdmQwZEJXVVJXVVZGRVJFSkdWbU15Vm5sSlJ6bHFZMFJSZUUxSFNtMWtSMVo2WkVSQlpRcEdkekI1VFdwRmVFMUVUWGRPZWswd1RrUk9ZVVozTUhwTmFrVjNUWHBGZUU5VVRUQk9SRTVoVFVWRmVFTjZRVXBDWjA1V1FrRlpWRUZzVmxSTlVsbDNDa1pCV1VSV1VWRkxSRUV4UkdGWVRtcGllVUpVWlZoT01GcFhNWHBOVW05M1IwRlpSRlpSVVVSRVFrWldZekpXZVVsSE9XcGpSRkY0VFVkS2JXUkhWbm9LWkVSRFFtNTZRVTVDWjJ0eGFHdHBSemwzTUVKQlVVVkdRVUZQUW1wUlFYZG5XV3REWjFsRlFYSkdOVUZPVDNWNEszcHhkRWQzUlhod1kwSm1hbXhYYUFvcmFsa3hjVlZTVTIxeU9XTTBjWG94Um5wSlRVUlVkM0oyZGxCVGFtUlFNVWhWVTNKU1NFUnRTMHhPVlhCdE15dEpkRU4xVjFSdmRXOHZVVFZoYWtSRENuRktiazFYVVZRMFRXRkZXbTlxZUZnMVZVUnVZMHQwV1hWclRIYzFWMGxWTWxCQ1dIZGtRWGhXTTJ0eksyMDJkVVJuZFZoUlUwTnVNME5NY1RCT01GUUtNV3B6YUNzMWJuSnpTbWhqV1VKSU5rVkVjME5CZDBWQlFWUkJUa0puYTNGb2EybEhPWGN3UWtGUlZVWkJRVTlDWjFGQ09VcFBha0U1S3k5c2FUQlVLd3BCZWsxeFMzcEZSVXgxVUVObmJTOU9RbE56T0U5WllXZHRjVGhVVEdOU1NVeFBXRU5CTkRFeFpWQjZVVXBIVTJScFpHRnhjVk5oYWxSNVN6WkVhVGRUQ2xsRFJtNUZOSEIzTUdWNVdUSk1ibTVCY2tWNFl6RnBiRkZTYWpWVGRFbFBlVTF4TDI1TmFXOUpTVTk0VkVOM1MyMWpaWGw1YUhWTmIzUnBibmRYU3pZS2Iwb3hLelJHYkZGcUwybE5kV054TUdSV1FqQnlXWFJyVFhWTVMwMW5QVDBLTFMwdExTMUZUa1FnUTBWU1ZFbEdTVU5CVkVVdExTMHRMUW89Ci0tLQphcGlWZXJzaW9uOiB2MQpraW5kOiBTZXJ2aWNlQWNjb3VudAptZXRhZGF0YToKICBuYW1lOiBhY2ktY29udGFpbmVycy1jb250cm9sbGVyCiAgbmFtZXNwYWNlOiBhY2ktY29udGFpbmVycy1zeXN0ZW0KICBsYWJlbHM6CiAgICBhY2ktY29udGFpbmVycy1jb25maWctdmVyc2lvbjogIjY1YTYxNjg2LWEwM2UtNDEwNS1hZGZkLThhNTlhM2FlYjgwMCIKLS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlcnZpY2VBY2NvdW50Cm1ldGFkYXRhOgogIG5hbWU6IGFjaS1jb250YWluZXJzLWhvc3QtYWdlbnQKICBuYW1lc3BhY2U6IGFjaS1jb250YWluZXJzLXN5c3RlbQogIGxhYmVsczoKICAgIGFjaS1jb250YWluZXJzLWNvbmZpZy12ZXJzaW9uOiAiNjVhNjE2ODYtYTAzZS00MTA1LWFkZmQtOGE1OWEzYWViODAwIgotLS0KYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBDbHVzdGVyUm9sZQptZXRhZGF0YToKICBsYWJlbHM6CiAgICBhY2ktY29udGFpbmVycy1jb25maWctdmVyc2lvbjogIjY1YTYxNjg2LWEwM2UtNDEwNS1hZGZkLThhNTlhM2FlYjgwMCIKICAgIG5ldHdvcmstcGx1Z2luOiBhY2ktY29udGFpbmVycwogIG5hbWU6IGFjaS1jb250YWluZXJzOmNvbnRyb2xsZXIKcnVsZXM6Ci0gYXBpR3JvdXBzOgogIC0gIiIKICByZXNvdXJjZXM6CiAgLSBub2RlcwogIC0gbmFtZXNwYWNlcwogIC0gcG9kcwogIC0gZW5kcG9pbnRzCiAgLSBzZXJ2aWNlcwogIC0gZXZlbnRzCiAgLSByZXBsaWNhdGlvbmNvbnRyb2xsZXJzCiAgLSBzZXJ2aWNlYWNjb3VudHMKICB2ZXJiczoKICAtIGxpc3QKICAtIHdhdGNoCiAgLSBnZXQKICAtIHBhdGNoCiAgLSBjcmVhdGUKICAtIHVwZGF0ZQogIC0gZGVsZXRlCi0gYXBpR3JvdXBzOgogIC0gIiIKICByZXNvdXJjZXM6CiAgLSBjb25maWdtYXBzCiAgdmVyYnM6CiAgLSBsaXN0CiAgLSB3YXRjaAogIC0gZ2V0CiAgLSBjcmVhdGUKICAtIHVwZGF0ZQogIC0gZGVsZXRlCi0gYXBpR3JvdXBzOgogIC0gImFwaWV4dGVuc2lvbnMuazhzLmlvIgogIHJlc291cmNlczoKICAtIGN1c3RvbXJlc291cmNlZGVmaW5pdGlvbnMKICB2ZXJiczoKICAtICcqJwotIGFwaUdyb3VwczoKICAtICJyYmFjLmF1dGhvcml6YXRpb24uazhzLmlvIgogIHJlc291cmNlczoKICAtIGNsdXN0ZXJyb2xlcwogIC0gY2x1c3RlcnJvbGViaW5kaW5ncwogIHZlcmJzOgogIC0gJyonCi0gYXBpR3JvdXBzOgogIC0gIm5ldHdvcmtpbmcuazhzLmlvIgogIHJlc291cmNlczoKICAtIG5ldHdvcmtwb2xpY2llcwogIHZlcmJzOgogIC0gbGlzdAogIC0gd2F0Y2gKICAtIGdldAotIGFwaUdyb3VwczoKICAtICJhcHBzIgogIHJlc291cmNlczoKICAtIGRlcGxveW1lbnRzCiAgLSByZXBsaWNhc2V0cwogIC0gZGFlbW9uc2V0cwogIC0gc3RhdGVmdWxzZXRzCiAgdmVyYnM6CiAgLSAnKicKLSBhcGlHcm91cHM6CiAgLSAiIgogIHJlc291cmNlczoKICAtIG5vZGVzCiAgLSBzZXJ2aWNlcy9zdGF0dXMKICB2ZXJiczoKICAtIHVwZGF0ZQotIGFwaUdyb3VwczoKICAtICJtb25pdG9yaW5nLmNvcmVvcy5jb20iCiAgcmVzb3VyY2VzOgogIC0gc2VydmljZW1vbml0b3JzCiAgdmVyYnM6CiAgLSBnZXQKICAtIGNyZWF0ZQotIGFwaUdyb3VwczoKICAtICJhY2kuc25hdCIKICByZXNvdXJjZXM6CiAgLSBzbmF0cG9saWNpZXMvZmluYWxpemVycwogIC0gc25hdHBvbGljaWVzL3N0YXR1cwogIC0gbm9kZWluZm9zCiAgdmVyYnM6CiAgLSB1cGRhdGUKICAtIGNyZWF0ZQogIC0gbGlzdAogIC0gd2F0Y2gKICAtIGdldAogIC0gZGVsZXRlCi0gYXBpR3JvdXBzOgogIC0gImFjaS5zbmF0IgogIHJlc291cmNlczoKICAtIHNuYXRnbG9iYWxpbmZvcwogIC0gc25hdHBvbGljaWVzCiAgLSBub2RlaW5mb3MKICAtIHJkY29uZmlncwogIHZlcmJzOgogIC0gbGlzdAogIC0gd2F0Y2gKICAtIGdldAogIC0gY3JlYXRlCiAgLSB1cGRhdGUKICAtIGRlbGV0ZQotIGFwaUdyb3VwczoKICAtICJhY2kucW9zIgogIHJlc291cmNlczoKICAtIHFvc3BvbGljaWVzCiAgdmVyYnM6CiAgLSBsaXN0CiAgLSB3YXRjaAogIC0gZ2V0CiAgLSBjcmVhdGUKICAtIHVwZGF0ZQogIC0gZGVsZXRlCiAgLSBwYXRjaAotIGFwaUdyb3VwczoKICAtICJhY2kubmV0ZmxvdyIKICByZXNvdXJjZXM6CiAgLSBuZXRmbG93cG9saWNpZXMKICB2ZXJiczoKICAtIGxpc3QKICAtIHdhdGNoCiAgLSBnZXQKICAtIHVwZGF0ZQotIGFwaUdyb3VwczoKICAtICJhY2kuZXJzcGFuIgogIHJlc291cmNlczoKICAtIGVyc3BhbnBvbGljaWVzCiAgdmVyYnM6CiAgLSBsaXN0CiAgLSB3YXRjaAogIC0gZ2V0CiAgLSB1cGRhdGUKLSBhcGlHcm91cHM6CiAgLSAiYWNpLmF3IgogIHJlc291cmNlczoKICAtIG5vZGVwb2RpZnMKICB2ZXJiczoKICAtICcqJwotIGFwaUdyb3VwczoKICAtIGFwcHMub3BlbnNoaWZ0LmlvCiAgcmVzb3VyY2VzOgogIC0gZGVwbG95bWVudGNvbmZpZ3MKICB2ZXJiczoKICAtIGxpc3QKICAtIHdhdGNoCiAgLSBnZXQKLSBhcGlHcm91cHM6CiAgLSBkaXNjb3ZlcnkuazhzLmlvCiAgcmVzb3VyY2VzOgogIC0gZW5kcG9pbnRzbGljZXMKICB2ZXJiczoKICAtIGdldAogIC0gbGlzdAogIC0gd2F0Y2gKLSBhcGlHcm91cHM6CiAgLSAiYWNpLm5ldHBvbCIKICByZXNvdXJjZXM6CiAgLSBuZXR3b3JrcG9saWNpZXMKICB2ZXJiczoKICAtIGdldAogIC0gbGlzdAogIC0gd2F0Y2gKICAtIGNyZWF0ZQogIC0gdXBkYXRlCiAgLSBkZWxldGUKLSBhcGlHcm91cHM6CiAgLSAiYWNpLmRuc25ldHBvbCIKICByZXNvdXJjZXM6CiAgLSBkbnNuZXR3b3JrcG9saWNpZXMKICB2ZXJiczoKICAtIGdldAogIC0gbGlzdAogIC0gd2F0Y2gKICAtIGNyZWF0ZQogIC0gdXBkYXRlCiAgLSBkZWxldGUKLS0tCmFwaVZlcnNpb246IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8vdjEKa2luZDogQ2x1c3RlclJvbGUKbWV0YWRhdGE6CiAgbGFiZWxzOgogICAgYWNpLWNvbnRhaW5lcnMtY29uZmlnLXZlcnNpb246ICI2NWE2MTY4Ni1hMDNlLTQxMDUtYWRmZC04YTU5YTNhZWI4MDAiCiAgICBuZXR3b3JrLXBsdWdpbjogYWNpLWNvbnRhaW5lcnMKICBuYW1lOiBhY2ktY29udGFpbmVyczpob3N0LWFnZW50CnJ1bGVzOgotIGFwaUdyb3VwczoKICAtICIiCiAgcmVzb3VyY2VzOgogIC0gbm9kZXMKICAtIG5hbWVzcGFjZXMKICAtIHBvZHMKICAtIGVuZHBvaW50cwogIC0gc2VydmljZXMKICAtIHJlcGxpY2F0aW9uY29udHJvbGxlcnMKICB2ZXJiczoKICAtIGxpc3QKICAtIHdhdGNoCiAgLSBnZXQKICAtIHVwZGF0ZQotIGFwaUdyb3VwczoKICAtICIiCiAgcmVzb3VyY2VzOgogIC0gZXZlbnRzCiAgdmVyYnM6CiAgLSBjcmVhdGUKICAtIHBhdGNoCi0gYXBpR3JvdXBzOgogIC0gImFwaWV4dGVuc2lvbnMuazhzLmlvIgogIHJlc291cmNlczoKICAtIGN1c3RvbXJlc291cmNlZGVmaW5pdGlvbnMKICB2ZXJiczoKICAtIGxpc3QKICAtIHdhdGNoCiAgLSBnZXQKLSBhcGlHcm91cHM6CiAgLSAibmV0d29ya2luZy5rOHMuaW8iCiAgcmVzb3VyY2VzOgogIC0gbmV0d29ya3BvbGljaWVzCiAgdmVyYnM6CiAgLSBsaXN0CiAgLSB3YXRjaAogIC0gZ2V0Ci0gYXBpR3JvdXBzOgogIC0gImFwcHMiCiAgcmVzb3VyY2VzOgogIC0gZGVwbG95bWVudHMKICAtIHJlcGxpY2FzZXRzCiAgdmVyYnM6CiAgLSBsaXN0CiAgLSB3YXRjaAogIC0gZ2V0Ci0gYXBpR3JvdXBzOgogIC0gImFjaS5zbmF0IgogIHJlc291cmNlczoKICAtIHNuYXRwb2xpY2llcwogIC0gc25hdGdsb2JhbGluZm9zCiAgLSByZGNvbmZpZ3MKICB2ZXJiczoKICAtIGxpc3QKICAtIHdhdGNoCiAgLSBnZXQKLSBhcGlHcm91cHM6CiAgLSAiYWNpLnFvcyIKICByZXNvdXJjZXM6CiAgLSBxb3Nwb2xpY2llcwogIHZlcmJzOgogIC0gbGlzdAogIC0gd2F0Y2gKICAtIGdldAogIC0gY3JlYXRlCiAgLSB1cGRhdGUKICAtIGRlbGV0ZQogIC0gcGF0Y2gKLSBhcGlHcm91cHM6CiAgLSAiYWNpLmRyb3Bsb2ciCiAgcmVzb3VyY2VzOgogIC0gZW5hYmxlZHJvcGxvZ3MKICAtIHBydW5lZHJvcGxvZ3MKICB2ZXJiczoKICAtIGxpc3QKICAtIHdhdGNoCiAgLSBnZXQKLSBhcGlHcm91cHM6CiAgLSAiYWNpLnNuYXQiCiAgcmVzb3VyY2VzOgogIC0gbm9kZWluZm9zCiAgLSBzbmF0bG9jYWxpbmZvcwogIHZlcmJzOgogIC0gY3JlYXRlCiAgLSB1cGRhdGUKICAtIGxpc3QKICAtIHdhdGNoCiAgLSBnZXQKICAtIGRlbGV0ZQotIGFwaUdyb3VwczoKICAtICJjb25maWcub3BlbnNoaWZ0LmlvIgogIHJlc291cmNlczoKICAtIGluZnJhc3RydWN0dXJlcwogIHZlcmJzOgogIC0gZ2V0Ci0gYXBpR3JvdXBzOgogIC0gZGlzY292ZXJ5Lms4cy5pbwogIHJlc291cmNlczoKICAtIGVuZHBvaW50c2xpY2VzCiAgdmVyYnM6CiAgLSBnZXQKICAtIGxpc3QKICAtIHdhdGNoCi0gYXBpR3JvdXBzOgogIC0gImFjaS5uZXRwb2wiCiAgcmVzb3VyY2VzOgogIC0gbmV0d29ya3BvbGljaWVzCiAgdmVyYnM6CiAgLSBnZXQKICAtIGxpc3QKICAtIHdhdGNoCi0gYXBpR3JvdXBzOgogIC0gImFjaS5hdyIKICByZXNvdXJjZXM6CiAgLSBub2RlcG9kaWZzCiAgdmVyYnM6CiAgLSAiKiIKLS0tCmFwaVZlcnNpb246IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8vdjEKa2luZDogQ2x1c3RlclJvbGVCaW5kaW5nCm1ldGFkYXRhOgogIG5hbWU6IGFjaS1jb250YWluZXJzOmNvbnRyb2xsZXIKICBsYWJlbHM6CiAgICBhY2ktY29udGFpbmVycy1jb25maWctdmVyc2lvbjogIjY1YTYxNjg2LWEwM2UtNDEwNS1hZGZkLThhNTlhM2FlYjgwMCIKcm9sZVJlZjoKICBhcGlHcm91cDogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pbwogIGtpbmQ6IENsdXN0ZXJSb2xlCiAgbmFtZTogYWNpLWNvbnRhaW5lcnM6Y29udHJvbGxlcgpzdWJqZWN0czoKLSBraW5kOiBTZXJ2aWNlQWNjb3VudAogIG5hbWU6IGFjaS1jb250YWluZXJzLWNvbnRyb2xsZXIKICBuYW1lc3BhY2U6IGFjaS1jb250YWluZXJzLXN5c3RlbQotLS0KYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBDbHVzdGVyUm9sZUJpbmRpbmcKbWV0YWRhdGE6CiAgbmFtZTogYWNpLWNvbnRhaW5lcnM6aG9zdC1hZ2VudAogIGxhYmVsczoKICAgIGFjaS1jb250YWluZXJzLWNvbmZpZy12ZXJzaW9uOiAiNjVhNjE2ODYtYTAzZS00MTA1LWFkZmQtOGE1OWEzYWViODAwIgpyb2xlUmVmOgogIGFwaUdyb3VwOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvCiAga2luZDogQ2x1c3RlclJvbGUKICBuYW1lOiBhY2ktY29udGFpbmVyczpob3N0LWFnZW50CnN1YmplY3RzOgotIGtpbmQ6IFNlcnZpY2VBY2NvdW50CiAgbmFtZTogYWNpLWNvbnRhaW5lcnMtaG9zdC1hZ2VudAogIG5hbWVzcGFjZTogYWNpLWNvbnRhaW5lcnMtc3lzdGVtCi0tLQphcGlWZXJzaW9uOiBhcHBzL3YxCmtpbmQ6IERhZW1vblNldAptZXRhZGF0YToKICBuYW1lOiBhY2ktY29udGFpbmVycy1ob3N0CiAgbmFtZXNwYWNlOiBhY2ktY29udGFpbmVycy1zeXN0ZW0KICBsYWJlbHM6CiAgICBhY2ktY29udGFpbmVycy1jb25maWctdmVyc2lvbjogIjY1YTYxNjg2LWEwM2UtNDEwNS1hZGZkLThhNTlhM2FlYjgwMCIKICAgIG5ldHdvcmstcGx1Z2luOiBhY2ktY29udGFpbmVycwpzcGVjOgogIHVwZGF0ZVN0cmF0ZWd5OgogICAgdHlwZTogUm9sbGluZ1VwZGF0ZQogIHNlbGVjdG9yOgogICAgbWF0Y2hMYWJlbHM6CiAgICAgIG5hbWU6IGFjaS1jb250YWluZXJzLWhvc3QKICAgICAgbmV0d29yay1wbHVnaW46IGFjaS1jb250YWluZXJzCiAgdGVtcGxhdGU6CiAgICBtZXRhZGF0YToKICAgICAgbGFiZWxzOgogICAgICAgIG5hbWU6IGFjaS1jb250YWluZXJzLWhvc3QKICAgICAgICBuZXR3b3JrLXBsdWdpbjogYWNpLWNvbnRhaW5lcnMKICAgICAgYW5ub3RhdGlvbnM6CiAgICAgICAgc2NoZWR1bGVyLmFscGhhLmt1YmVybmV0ZXMuaW8vY3JpdGljYWwtcG9kOiAnJwogICAgc3BlYzoKICAgICAgaG9zdE5ldHdvcms6IHRydWUKICAgICAgaG9zdFBJRDogdHJ1ZQogICAgICBob3N0SVBDOiB0cnVlCiAgICAgIHNlcnZpY2VBY2NvdW50TmFtZTogYWNpLWNvbnRhaW5lcnMtaG9zdC1hZ2VudAogICAgICBpbWFnZVB1bGxTZWNyZXRzOgogICAgICAgIC0gbmFtZTogJ25vaXJvLWRvY2tlci1yZWdpc3RyeS1zZWNyZXQnCiAgICAgIHRvbGVyYXRpb25zOgogICAgICAgIC0gb3BlcmF0b3I6IEV4aXN0cwogICAgICBpbml0Q29udGFpbmVyczoKICAgICAgICAtIG5hbWU6IGNuaWRlcGxveQogICAgICAgICAgaW1hZ2U6IHF1YXkuaW8vbm9pcm9sYWJzL2NuaWRlcGxveTo1LjIuMy40LjFkMTUwZGEKICAgICAgICAgIGltYWdlUHVsbFBvbGljeTogQWx3YXlzCiAgICAgICAgICBzZWN1cml0eUNvbnRleHQ6CiAgICAgICAgICAgIHByaXZpbGVnZWQ6IHRydWUKICAgICAgICAgICAgY2FwYWJpbGl0aWVzOgogICAgICAgICAgICAgIGFkZDoKICAgICAgICAgICAgICAgIC0gU1lTX0FETUlOCiAgICAgICAgICB2b2x1bWVNb3VudHM6CiAgICAgICAgICAgIC0gbmFtZTogY25pLWJpbgogICAgICAgICAgICAgIG1vdW50UGF0aDogL21udC9jbmktYmluCiAgICAgIHByaW9yaXR5Q2xhc3NOYW1lOiBhY2ljbmktcHJpb3JpdHkKICAgICAgY29udGFpbmVyczoKICAgICAgICAtIG5hbWU6IGFjaS1jb250YWluZXJzLWhvc3QKICAgICAgICAgIGltYWdlOiBxdWF5LmlvL25vaXJvbGFicy9hY2ktY29udGFpbmVycy1ob3N0OjUuMi4zLjQuMWQxNTBkYQogICAgICAgICAgaW1hZ2VQdWxsUG9saWN5OiBBbHdheXMKICAgICAgICAgIHNlY3VyaXR5Q29udGV4dDoKICAgICAgICAgICAgcHJpdmlsZWdlZDogdHJ1ZQogICAgICAgICAgICBjYXBhYmlsaXRpZXM6CiAgICAgICAgICAgICAgYWRkOgogICAgICAgICAgICAgICAgLSBTWVNfQURNSU4KICAgICAgICAgICAgICAgIC0gTkVUX0FETUlOCiAgICAgICAgICAgICAgICAtIFNZU19QVFJBQ0UKICAgICAgICAgICAgICAgIC0gTkVUX1JBVwogICAgICAgICAgZW52OgogICAgICAgICAgICAtIG5hbWU6IEdPVFJBQ0VCQUNLCiAgICAgICAgICAgICAgdmFsdWU6ICIyIgogICAgICAgICAgICAtIG5hbWU6IEtVQkVSTkVURVNfTk9ERV9OQU1FCiAgICAgICAgICAgICAgdmFsdWVGcm9tOgogICAgICAgICAgICAgICAgZmllbGRSZWY6CiAgICAgICAgICAgICAgICAgIGZpZWxkUGF0aDogc3BlYy5ub2RlTmFtZQogICAgICAgICAgICAtIG5hbWU6IFRFTkFOVAogICAgICAgICAgICAgIHZhbHVlOiAib2NwNDEwYmZ0ZXN0IgogICAgICAgICAgICAtIG5hbWU6IE5PREVfRVBHCiAgICAgICAgICAgICAgdmFsdWU6ICJhY2ktY29udGFpbmVycy1vY3A0MTBiZnRlc3R8YWNpLWNvbnRhaW5lcnMtbm9kZXMiCiAgICAgICAgICAgIC0gbmFtZTogRFVSQVRJT05fV0FJVF9GT1JfTkVUV09SSwogICAgICAgICAgICAgIHZhbHVlOiAiMjEwIgogICAgICAgICAgdm9sdW1lTW91bnRzOgogICAgICAgICAgICAtIG5hbWU6IGNuaS1iaW4KICAgICAgICAgICAgICBtb3VudFBhdGg6IC9tbnQvY25pLWJpbgogICAgICAgICAgICAtIG5hbWU6IGNuaS1jb25mCiAgICAgICAgICAgICAgbW91bnRQYXRoOiAvbW50L2NuaS1jb25mCiAgICAgICAgICAgIC0gbmFtZTogaG9zdHZhcgogICAgICAgICAgICAgIG1vdW50UGF0aDogL3Vzci9sb2NhbC92YXIKICAgICAgICAgICAgLSBuYW1lOiBob3N0cnVuCiAgICAgICAgICAgICAgbW91bnRQYXRoOiAvcnVuCiAgICAgICAgICAgIC0gbmFtZTogaG9zdHJ1bgogICAgICAgICAgICAgIG1vdW50UGF0aDogL3Vzci9sb2NhbC9ydW4KICAgICAgICAgICAgLSBuYW1lOiBvcGZsZXgtaG9zdGNvbmZpZy12b2x1bWUKICAgICAgICAgICAgICBtb3VudFBhdGg6IC91c3IvbG9jYWwvZXRjL29wZmxleC1hZ2VudC1vdnMvYmFzZS1jb25mLmQKICAgICAgICAgICAgLSBuYW1lOiBob3N0LWNvbmZpZy12b2x1bWUKICAgICAgICAgICAgICBtb3VudFBhdGg6IC91c3IvbG9jYWwvZXRjL2FjaS1jb250YWluZXJzLwogICAgICAgICAgICAtIG1vdW50UGF0aDogL3J1bi9uZXRucwogICAgICAgICAgICAgIG5hbWU6IGhvc3QtcnVuLW5ldG5zCiAgICAgICAgICAgICAgcmVhZE9ubHk6IHRydWUKICAgICAgICAgICAgICBtb3VudFByb3BhZ2F0aW9uOiBIb3N0VG9Db250YWluZXIKICAgICAgICAgIGxpdmVuZXNzUHJvYmU6CiAgICAgICAgICAgIGZhaWx1cmVUaHJlc2hvbGQ6IDEwCiAgICAgICAgICAgIGh0dHBHZXQ6CiAgICAgICAgICAgICAgcGF0aDogL3N0YXR1cwogICAgICAgICAgICAgIHBvcnQ6IDgwOTAKICAgICAgICAgICAgICBzY2hlbWU6IEhUVFAKICAgICAgICAgICAgaW5pdGlhbERlbGF5U2Vjb25kczogMTIwCiAgICAgICAgICAgIHBlcmlvZFNlY29uZHM6IDYwCiAgICAgICAgICAgIHN1Y2Nlc3NUaHJlc2hvbGQ6IDEKICAgICAgICAgICAgdGltZW91dFNlY29uZHM6IDMwCiAgICAgICAgLSBuYW1lOiBvcGZsZXgtYWdlbnQKICAgICAgICAgIGVudjoKICAgICAgICAgICAgLSBuYW1lOiBSRUJPT1RfV0lUSF9PVlMKICAgICAgICAgICAgICB2YWx1ZTogInRydWUiCiAgICAgICAgICBpbWFnZTogcXVheS5pby9ub2lyb2xhYnMvb3BmbGV4OjUuMi4zLjQuMWQxNTBkYQogICAgICAgICAgaW1hZ2VQdWxsUG9saWN5OiBBbHdheXMKICAgICAgICAgIHNlY3VyaXR5Q29udGV4dDoKICAgICAgICAgICAgcHJpdmlsZWdlZDogdHJ1ZQogICAgICAgICAgICBjYXBhYmlsaXRpZXM6CiAgICAgICAgICAgICAgYWRkOgogICAgICAgICAgICAgICAgLSBORVRfQURNSU4KICAgICAgICAgIHZvbHVtZU1vdW50czoKICAgICAgICAgICAgLSBuYW1lOiBob3N0dmFyCiAgICAgICAgICAgICAgbW91bnRQYXRoOiAvdXNyL2xvY2FsL3ZhcgogICAgICAgICAgICAtIG5hbWU6IGhvc3RydW4KICAgICAgICAgICAgICBtb3VudFBhdGg6IC9ydW4KICAgICAgICAgICAgLSBuYW1lOiBob3N0cnVuCiAgICAgICAgICAgICAgbW91bnRQYXRoOiAvdXNyL2xvY2FsL3J1bgogICAgICAgICAgICAtIG5hbWU6IG9wZmxleC1ob3N0Y29uZmlnLXZvbHVtZQogICAgICAgICAgICAgIG1vdW50UGF0aDogL3Vzci9sb2NhbC9ldGMvb3BmbGV4LWFnZW50LW92cy9iYXNlLWNvbmYuZAogICAgICAgICAgICAtIG5hbWU6IG9wZmxleC1jb25maWctdm9sdW1lCiAgICAgICAgICAgICAgbW91bnRQYXRoOiAvdXNyL2xvY2FsL2V0Yy9vcGZsZXgtYWdlbnQtb3ZzL2NvbmYuZAogICAgICAgIC0gbmFtZTogbWNhc3QtZGFlbW9uCiAgICAgICAgICBpbWFnZTogcXVheS5pby9ub2lyb2xhYnMvb3BmbGV4OjUuMi4zLjQuMWQxNTBkYQogICAgICAgICAgY29tbWFuZDogWyIvYmluL3NoIl0KICAgICAgICAgIGFyZ3M6IFsiL3Vzci9sb2NhbC9iaW4vbGF1bmNoLW1jYXN0ZGFlbW9uLnNoIl0KICAgICAgICAgIGltYWdlUHVsbFBvbGljeTogQWx3YXlzCiAgICAgICAgICBzZWN1cml0eUNvbnRleHQ6CiAgICAgICAgICAgIHByaXZpbGVnZWQ6IHRydWUKICAgICAgICAgIHZvbHVtZU1vdW50czoKICAgICAgICAgICAgLSBuYW1lOiBob3N0dmFyCiAgICAgICAgICAgICAgbW91bnRQYXRoOiAvdXNyL2xvY2FsL3ZhcgogICAgICAgICAgICAtIG5hbWU6IGhvc3RydW4KICAgICAgICAgICAgICBtb3VudFBhdGg6IC9ydW4KICAgICAgICAgICAgLSBuYW1lOiBob3N0cnVuCiAgICAgICAgICAgICAgbW91bnRQYXRoOiAvdXNyL2xvY2FsL3J1bgogICAgICByZXN0YXJ0UG9saWN5OiBBbHdheXMKICAgICAgdm9sdW1lczoKICAgICAgICAtIG5hbWU6IGNuaS1iaW4KICAgICAgICAgIGhvc3RQYXRoOgogICAgICAgICAgICBwYXRoOiAvdmFyL2xpYgogICAgICAgIC0gbmFtZTogY25pLWNvbmYKICAgICAgICAgIGhvc3RQYXRoOgogICAgICAgICAgICBwYXRoOiAvZXRjL2t1YmVybmV0ZXMKICAgICAgICAtIG5hbWU6IGhvc3R2YXIKICAgICAgICAgIGhvc3RQYXRoOgogICAgICAgICAgICBwYXRoOiAvdmFyCiAgICAgICAgLSBuYW1lOiBob3N0cnVuCiAgICAgICAgICBob3N0UGF0aDoKICAgICAgICAgICAgcGF0aDogL3J1bgogICAgICAgIC0gbmFtZTogaG9zdC1jb25maWctdm9sdW1lCiAgICAgICAgICBjb25maWdNYXA6CiAgICAgICAgICAgIG5hbWU6IGFjaS1jb250YWluZXJzLWNvbmZpZwogICAgICAgICAgICBpdGVtczoKICAgICAgICAgICAgICAtIGtleTogaG9zdC1hZ2VudC1jb25maWcKICAgICAgICAgICAgICAgIHBhdGg6IGhvc3QtYWdlbnQuY29uZgogICAgICAgIC0gbmFtZTogb3BmbGV4LWhvc3Rjb25maWctdm9sdW1lCiAgICAgICAgICBlbXB0eURpcjoKICAgICAgICAgICAgbWVkaXVtOiBNZW1vcnkKICAgICAgICAtIG5hbWU6IG9wZmxleC1jb25maWctdm9sdW1lCiAgICAgICAgICBjb25maWdNYXA6CiAgICAgICAgICAgIG5hbWU6IGFjaS1jb250YWluZXJzLWNvbmZpZwogICAgICAgICAgICBpdGVtczoKICAgICAgICAgICAgICAtIGtleTogb3BmbGV4LWFnZW50LWNvbmZpZwogICAgICAgICAgICAgICAgcGF0aDogbG9jYWwuY29uZgogICAgICAgIC0gbmFtZTogaG9zdC1ydW4tbmV0bnMKICAgICAgICAgIGhvc3RQYXRoOgogICAgICAgICAgICBwYXRoOiAvcnVuL25ldG5zCi0tLQphcGlWZXJzaW9uOiBhcHBzL3YxCmtpbmQ6IERhZW1vblNldAptZXRhZGF0YToKICBuYW1lOiBhY2ktY29udGFpbmVycy1vcGVudnN3aXRjaAogIG5hbWVzcGFjZTogYWNpLWNvbnRhaW5lcnMtc3lzdGVtCiAgbGFiZWxzOgogICAgYWNpLWNvbnRhaW5lcnMtY29uZmlnLXZlcnNpb246ICI2NWE2MTY4Ni1hMDNlLTQxMDUtYWRmZC04YTU5YTNhZWI4MDAiCiAgICBuZXR3b3JrLXBsdWdpbjogYWNpLWNvbnRhaW5lcnMKc3BlYzoKICB1cGRhdGVTdHJhdGVneToKICAgIHR5cGU6IFJvbGxpbmdVcGRhdGUKICBzZWxlY3RvcjoKICAgIG1hdGNoTGFiZWxzOgogICAgICBuYW1lOiBhY2ktY29udGFpbmVycy1vcGVudnN3aXRjaAogICAgICBuZXR3b3JrLXBsdWdpbjogYWNpLWNvbnRhaW5lcnMKICB0ZW1wbGF0ZToKICAgIG1ldGFkYXRhOgogICAgICBsYWJlbHM6CiAgICAgICAgbmFtZTogYWNpLWNvbnRhaW5lcnMtb3BlbnZzd2l0Y2gKICAgICAgICBuZXR3b3JrLXBsdWdpbjogYWNpLWNvbnRhaW5lcnMKICAgICAgYW5ub3RhdGlvbnM6CiAgICAgICAgc2NoZWR1bGVyLmFscGhhLmt1YmVybmV0ZXMuaW8vY3JpdGljYWwtcG9kOiAnJwogICAgc3BlYzoKICAgICAgaG9zdE5ldHdvcms6IHRydWUKICAgICAgaG9zdFBJRDogdHJ1ZQogICAgICBob3N0SVBDOiB0cnVlCiAgICAgIHNlcnZpY2VBY2NvdW50TmFtZTogYWNpLWNvbnRhaW5lcnMtaG9zdC1hZ2VudAogICAgICBpbWFnZVB1bGxTZWNyZXRzOgogICAgICAgIC0gbmFtZTogJ25vaXJvLWRvY2tlci1yZWdpc3RyeS1zZWNyZXQnCiAgICAgIHRvbGVyYXRpb25zOgogICAgICAgIC0gb3BlcmF0b3I6IEV4aXN0cwogICAgICBwcmlvcml0eUNsYXNzTmFtZTogYWNpY25pLXByaW9yaXR5CiAgICAgIGNvbnRhaW5lcnM6CiAgICAgICAgLSBuYW1lOiBhY2ktY29udGFpbmVycy1vcGVudnN3aXRjaAogICAgICAgICAgaW1hZ2U6IHF1YXkuaW8vbm9pcm9sYWJzL29wZW52c3dpdGNoOjUuMi4zLjQuMWQxNTBkYQogICAgICAgICAgaW1hZ2VQdWxsUG9saWN5OiBBbHdheXMKICAgICAgICAgIHJlc291cmNlczoKICAgICAgICAgICAgbGltaXRzOgogICAgICAgICAgICAgIG1lbW9yeTogIjFHaSIKICAgICAgICAgIHNlY3VyaXR5Q29udGV4dDoKICAgICAgICAgICAgcHJpdmlsZWdlZDogdHJ1ZQogICAgICAgICAgICBjYXBhYmlsaXRpZXM6CiAgICAgICAgICAgICAgYWRkOgogICAgICAgICAgICAgICAgLSBORVRfQURNSU4KICAgICAgICAgICAgICAgIC0gU1lTX01PRFVMRQogICAgICAgICAgICAgICAgLSBTWVNfTklDRQogICAgICAgICAgICAgICAgLSBJUENfTE9DSwogICAgICAgICAgZW52OgogICAgICAgICAgICAtIG5hbWU6IE9WU19SVU5ESVIKICAgICAgICAgICAgICB2YWx1ZTogL3Vzci9sb2NhbC92YXIvcnVuL29wZW52c3dpdGNoCiAgICAgICAgICB2b2x1bWVNb3VudHM6CiAgICAgICAgICAgIC0gbmFtZTogaG9zdHZhcgogICAgICAgICAgICAgIG1vdW50UGF0aDogL3Vzci9sb2NhbC92YXIKICAgICAgICAgICAgLSBuYW1lOiBob3N0cnVuCiAgICAgICAgICAgICAgbW91bnRQYXRoOiAvcnVuCiAgICAgICAgICAgIC0gbmFtZTogaG9zdHJ1bgogICAgICAgICAgICAgIG1vdW50UGF0aDogL3Vzci9sb2NhbC9ydW4KICAgICAgICAgICAgLSBuYW1lOiBob3N0ZXRjCiAgICAgICAgICAgICAgbW91bnRQYXRoOiAvdXNyL2xvY2FsL2V0YwogICAgICAgICAgICAtIG5hbWU6IGhvc3Rtb2R1bGVzCiAgICAgICAgICAgICAgbW91bnRQYXRoOiAvbGliL21vZHVsZXMKICAgICAgICAgIGxpdmVuZXNzUHJvYmU6CiAgICAgICAgICAgIGV4ZWM6CiAgICAgICAgICAgICAgY29tbWFuZDoKICAgICAgICAgICAgICAgIC0gL3Vzci9sb2NhbC9iaW4vbGl2ZW5lc3Mtb3ZzLnNoCiAgICAgIHJlc3RhcnRQb2xpY3k6IEFsd2F5cwogICAgICB2b2x1bWVzOgogICAgICAgIC0gbmFtZTogaG9zdGV0YwogICAgICAgICAgaG9zdFBhdGg6CiAgICAgICAgICAgIHBhdGg6IC9ldGMKICAgICAgICAtIG5hbWU6IGhvc3R2YXIKICAgICAgICAgIGhvc3RQYXRoOgogICAgICAgICAgICBwYXRoOiAvdmFyCiAgICAgICAgLSBuYW1lOiBob3N0cnVuCiAgICAgICAgICBob3N0UGF0aDoKICAgICAgICAgICAgcGF0aDogL3J1bgogICAgICAgIC0gbmFtZTogaG9zdG1vZHVsZXMKICAgICAgICAgIGhvc3RQYXRoOgogICAgICAgICAgICBwYXRoOiAvbGliL21vZHVsZXMKLS0tCmFwaVZlcnNpb246IGFwcHMvdjEKa2luZDogRGVwbG95bWVudAptZXRhZGF0YToKICBuYW1lOiBhY2ktY29udGFpbmVycy1jb250cm9sbGVyCiAgbmFtZXNwYWNlOiBhY2ktY29udGFpbmVycy1zeXN0ZW0KICBsYWJlbHM6CiAgICBhY2ktY29udGFpbmVycy1jb25maWctdmVyc2lvbjogIjY1YTYxNjg2LWEwM2UtNDEwNS1hZGZkLThhNTlhM2FlYjgwMCIKICAgIG5ldHdvcmstcGx1Z2luOiBhY2ktY29udGFpbmVycwogICAgbmFtZTogYWNpLWNvbnRhaW5lcnMtY29udHJvbGxlcgpzcGVjOgogIHJlcGxpY2FzOiAxCiAgc3RyYXRlZ3k6CiAgICB0eXBlOiBSZWNyZWF0ZQogIHNlbGVjdG9yOgogICAgbWF0Y2hMYWJlbHM6CiAgICAgIG5hbWU6IGFjaS1jb250YWluZXJzLWNvbnRyb2xsZXIKICAgICAgbmV0d29yay1wbHVnaW46IGFjaS1jb250YWluZXJzCiAgdGVtcGxhdGU6CiAgICBtZXRhZGF0YToKICAgICAgbmFtZTogYWNpLWNvbnRhaW5lcnMtY29udHJvbGxlcgogICAgICBuYW1lc3BhY2U6IGFjaS1jb250YWluZXJzLXN5c3RlbQogICAgICBsYWJlbHM6CiAgICAgICAgbmFtZTogYWNpLWNvbnRhaW5lcnMtY29udHJvbGxlcgogICAgICAgIG5ldHdvcmstcGx1Z2luOiBhY2ktY29udGFpbmVycwogICAgICBhbm5vdGF0aW9uczoKICAgICAgICBzY2hlZHVsZXIuYWxwaGEua3ViZXJuZXRlcy5pby9jcml0aWNhbC1wb2Q6ICcnCiAgICBzcGVjOgogICAgICBob3N0TmV0d29yazogdHJ1ZQogICAgICBzZXJ2aWNlQWNjb3VudE5hbWU6IGFjaS1jb250YWluZXJzLWNvbnRyb2xsZXIKICAgICAgaW1hZ2VQdWxsU2VjcmV0czoKICAgICAgICAtIG5hbWU6ICdub2lyby1kb2NrZXItcmVnaXN0cnktc2VjcmV0JwogICAgICB0b2xlcmF0aW9uczoKICAgICAgICAtIGVmZmVjdDogTm9FeGVjdXRlCiAgICAgICAgICBvcGVyYXRvcjogRXhpc3RzCiAgICAgICAgICB0b2xlcmF0aW9uU2Vjb25kczogNjAKICAgICAgICAtIGVmZmVjdDogTm9TY2hlZHVsZQogICAgICAgICAga2V5OiBub2RlLmt1YmVybmV0ZXMuaW8vbm90LXJlYWR5CiAgICAgICAgICBvcGVyYXRvcjogRXhpc3RzCiAgICAgICAgLSBlZmZlY3Q6IE5vU2NoZWR1bGUKICAgICAgICAgIGtleTogbm9kZS1yb2xlLmt1YmVybmV0ZXMuaW8vbWFzdGVyCiAgICAgICAgICBvcGVyYXRvcjogRXhpc3RzCiAgICAgIHByaW9yaXR5Q2xhc3NOYW1lOiBhY2ljbmktcHJpb3JpdHkKICAgICAgY29udGFpbmVyczoKICAgICAgICAtIG5hbWU6IGFjaS1jb250YWluZXJzLWNvbnRyb2xsZXIKICAgICAgICAgIGltYWdlOiBxdWF5LmlvL25vaXJvbGFicy9hY2ktY29udGFpbmVycy1jb250cm9sbGVyOjUuMi4zLjQuMWQxNTBkYQogICAgICAgICAgaW1hZ2VQdWxsUG9saWN5OiBBbHdheXMKICAgICAgICAgIGVudjoKICAgICAgICAgICAgLSBuYW1lOiBXQVRDSF9OQU1FU1BBQ0UKICAgICAgICAgICAgICB2YWx1ZTogIiIKICAgICAgICAgICAgLSBuYW1lOiBBQ0lfU05BVF9OQU1FU1BBQ0UKICAgICAgICAgICAgICB2YWx1ZTogImFjaS1jb250YWluZXJzLXN5c3RlbSIKICAgICAgICAgICAgLSBuYW1lOiBBQ0lfU05BR0xPQkFMSU5GT19OQU1FCiAgICAgICAgICAgICAgdmFsdWU6ICJzbmF0Z2xvYmFsaW5mbyIKICAgICAgICAgICAgLSBuYW1lOiBBQ0lfUkRDT05GSUdfTkFNRQogICAgICAgICAgICAgIHZhbHVlOiAicm91dGluZ2RvbWFpbi1jb25maWciCiAgICAgICAgICAgIC0gbmFtZTogU1lTVEVNX05BTUVTUEFDRQogICAgICAgICAgICAgIHZhbHVlOiAiYWNpLWNvbnRhaW5lcnMtc3lzdGVtIgogICAgICAgICAgdm9sdW1lTW91bnRzOgogICAgICAgICAgICAtIG5hbWU6IGNvbnRyb2xsZXItY29uZmlnLXZvbHVtZQogICAgICAgICAgICAgIG1vdW50UGF0aDogL3Vzci9sb2NhbC9ldGMvYWNpLWNvbnRhaW5lcnMvCiAgICAgICAgICAgIC0gbmFtZTogYWNpLXVzZXItY2VydC12b2x1bWUKICAgICAgICAgICAgICBtb3VudFBhdGg6IC91c3IvbG9jYWwvZXRjL2FjaS1jZXJ0LwogICAgICAgICAgbGl2ZW5lc3NQcm9iZToKICAgICAgICAgICAgZmFpbHVyZVRocmVzaG9sZDogMTAKICAgICAgICAgICAgaHR0cEdldDoKICAgICAgICAgICAgICBwYXRoOiAvc3RhdHVzCiAgICAgICAgICAgICAgcG9ydDogODA5MQogICAgICAgICAgICAgIHNjaGVtZTogSFRUUAogICAgICAgICAgICBpbml0aWFsRGVsYXlTZWNvbmRzOiAxMjAKICAgICAgICAgICAgcGVyaW9kU2Vjb25kczogNjAKICAgICAgICAgICAgc3VjY2Vzc1RocmVzaG9sZDogMQogICAgICAgICAgICB0aW1lb3V0U2Vjb25kczogMzAKICAgICAgdm9sdW1lczoKICAgICAgICAtIG5hbWU6IGFjaS11c2VyLWNlcnQtdm9sdW1lCiAgICAgICAgICBzZWNyZXQ6CiAgICAgICAgICAgIHNlY3JldE5hbWU6IGFjaS11c2VyLWNlcnQKICAgICAgICAtIG5hbWU6IGNvbnRyb2xsZXItY29uZmlnLXZvbHVtZQogICAgICAgICAgY29uZmlnTWFwOgogICAgICAgICAgICBuYW1lOiBhY2ktY29udGFpbmVycy1jb25maWcKICAgICAgICAgICAgaXRlbXM6CiAgICAgICAgICAgICAgLSBrZXk6IGNvbnRyb2xsZXItY29uZmlnCiAgICAgICAgICAgICAgICBwYXRoOiBjb250cm9sbGVyLmNvbmYK"
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: acc-provision-config
  namespace: aci-containers-system
  labels:
    aci-containers-config-version: "65a61686-a03e-4105-adfd-8a59a3aeb800"
    network-plugin: aci-containers
data:
  spec: |-
    {
        "acc_provision_input": {
            "operator_managed_config": {
                "enable_updates": false
            },
            "aci_config": {
                "system_id": "ocp410bftest",
                "apic_hosts": [
                    "10.30.120.61"
                ],
                "aep": "hypf-aepocp-bm-1-servers",
                "vrf": {
                    "name": "ocp410_bf_vrf",
                    "tenant": "common"
                },
                "vmm_domain": {
                  "nested_inside": {
                    "installer_provisioned_lb_ip": "192.168.1.2"
                  }
                },
                "l3out": {
                    "name": "ocp410_bf_l3out",
                    "external_networks": [
                        "ocp-bf-l3-extepg"
                    ]
                }
            },
            "registry": {
                "image_prefix": "quay.io/noirolabs", 
                "image_pull_secret": "noiro-docker-registry-secret", 
                "network_operator_version": "cko-mvp-1"
            },
            "kube_config": {
                "drop_log_config": {}, 
                "image_pull_policy": "Always", 
                "istio_config": {}, 
                "multus": {}, 
                "nodepodif_config": {}, 
                "operator_managed_config": {}, 
                "ovs_memory_limit": "1Gi", 
                "sriov_config": {}
 
            },
            "logging": {
               "controller_log_level": "debug", 
               "hostagent_log_level": "debug", 
               "opflexagent_log_level": "debug"
            },
            "net_config": {
                "infra_vlan": 4093,
                "service_vlan": 201, 
                "kubeapi_vlan": 200,
                "extern_static": "10.4.0.1/24",
                "extern_dynamic": "10.3.0.1/24",
                "node_svc_subnet": "10.5.0.1/24",
                "node_subnet": "192.168.1.1/24",
                "pod_subnet": "10.2.0.1/16"
            }
        }
     }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: aci-containers-config
  namespace: aci-containers-system
  labels:
    aci-containers-config-version: "65a61686-a03e-4105-adfd-8a59a3aeb800"
    network-plugin: aci-containers
data:
  controller-config: |-
    {
        "flavor": "openshift-4.10-esx",
        "log-level": "debug",
        "apic-hosts": [
            "10.30.120.61"
        ],
        "apic-username": "ocp410bftest",
        "apic-private-key-path": "/usr/local/etc/aci-cert/user.key",
        "aci-prefix": "ocp410bftest",
        "aci-vmm-type": "OpenShift",
        "aci-vmm-domain": "ocp410bftest",
        "aci-vmm-controller": "ocp410bftest",
        "aci-policy-tenant": "ocp410bftest",
        "aci-podbd-dn": "uni/tn-ocp410bftest/BD-aci-containers-ocp410bftest-pod-bd",
        "aci-nodebd-dn": "uni/tn-ocp410bftest/BD-aci-containers-ocp410bftest-node-bd",
        "aci-service-phys-dom": "ocp410bftest-pdom",
        "aci-service-encap": "vlan-201",
        "aci-service-monitor-interval": 5,
        "aci-pbr-tracking-non-snat": false,
        "aci-vrf-tenant": "common",
        "aci-vrf-dn": "uni/tn-common/ctx-ocp410_bf_vrf",
        "aci-l3out": "ocp410_bf_l3out",
        "aci-ext-networks": [
            "ocp-bf-l3-extepg"
        ],
        "aci-vrf": "ocp410_bf_vrf",
        "default-endpoint-group": {
            "policy-space": "ocp410bftest",
            "name": "aci-containers-ocp410bftest|aci-containers-default"
        },
        "max-nodes-svc-graph": 32,
        "namespace-default-endpoint-group": {
            "aci-containers-system": {
                "policy-space": "ocp410bftest",
                "name": "aci-containers-ocp410bftest|aci-containers-system"
            },
            "istio-operator": {
                "policy-space": "ocp410bftest",
                "name": "aci-containers-ocp410bftest|aci-containers-istio"
            },
            "istio-system": {
                "policy-space": "ocp410bftest",
                "name": "aci-containers-ocp410bftest|aci-containers-istio"
            },
            "kube-service-catalog": {
                "policy-space": "ocp410bftest",
                "name": "aci-containers-ocp410bftest|aci-containers-system"
            },
            "kube-system": {
                "policy-space": "ocp410bftest",
                "name": "aci-containers-ocp410bftest|aci-containers-system"
            },
            "openshift-authentication": {
                "policy-space": "ocp410bftest",
                "name": "aci-containers-ocp410bftest|aci-containers-system"
            },
            "openshift-authentication-operator": {
                "policy-space": "ocp410bftest",
                "name": "aci-containers-ocp410bftest|aci-containers-system"
            },
            "openshift-console": {
                "policy-space": "ocp410bftest",
                "name": "aci-containers-ocp410bftest|aci-containers-system"
            },
            "openshift-dns": {
                "policy-space": "ocp410bftest",
                "name": "aci-containers-ocp410bftest|aci-containers-system"
            },
            "openshift-monitoring": {
                "policy-space": "ocp410bftest",
                "name": "aci-containers-ocp410bftest|aci-containers-system"
            },
            "openshift-web-console": {
                "policy-space": "ocp410bftest",
                "name": "aci-containers-ocp410bftest|aci-containers-system"
            }        },
        "service-ip-pool": [
            {
                "end": "10.3.0.254",
                "start": "10.3.0.2"
            }
        ],
        "extern-static": "10.4.0.1/24",
        "extern-dynamic": "10.3.0.1/24",
        "snat-contract-scope": "global",
        "static-service-ip-pool": [
            {
                "end": "10.4.0.254",
                "start": "10.4.0.2"
            }
        ],
        "pod-ip-pool": [
            {
                "end": "10.2.255.254",
                "start": "10.2.0.2"
            }
        ],
        "pod-subnet-chunk-size": 32,
        "node-service-ip-pool": [
            {
                "end": "10.5.0.254",
                "start": "10.5.0.2"
            }
        ],
        "node-service-subnets": [
            "10.5.0.1/24"
        ]
    }
  host-agent-config: |-
    {
        "flavor": "openshift-4.10-esx",
        "app-profile": "aci-containers-ocp410bftest",
        "opflex-mode": null,
        "log-level": "debug",
        "aci-snat-namespace": "aci-containers-system",
        "aci-vmm-type": "OpenShift",
        "aci-vmm-domain": "ocp410bftest",
        "aci-vmm-controller": "ocp410bftest",
        "installer-provisioned-lb-ip": "192.168.1.2",
        "aci-prefix": "ocp410bftest",
        "aci-vrf": "ocp410_bf_vrf",
        "aci-vrf-tenant": "common",
        "service-vlan": 201,
        "kubeapi-vlan": 200,
        "pod-subnet": "10.2.0.1/16",
        "node-subnet": "192.168.1.1/24",
        "encap-type": "vxlan",
        "aci-infra-vlan": 4093,
        "cni-netconfig": [
            {
                "gateway": "10.2.0.1",
                "routes": [
                    {
                        "dst": "0.0.0.0/0",
                        "gw": "10.2.0.1"
                    }
                ],
                "subnet": "10.2.0.0/16"
            }
        ],
        "default-endpoint-group": {
            "policy-space": "ocp410bftest",
            "name": "aci-containers-ocp410bftest|aci-containers-default"
        },
        "namespace-default-endpoint-group": {
            "aci-containers-system": {
                "policy-space": "ocp410bftest",
                "name": "aci-containers-ocp410bftest|aci-containers-system"
            },
            "istio-operator": {
                "policy-space": "ocp410bftest",
                "name": "aci-containers-ocp410bftest|aci-containers-istio"
            },
            "istio-system": {
                "policy-space": "ocp410bftest",
                "name": "aci-containers-ocp410bftest|aci-containers-istio"
            },
            "kube-service-catalog": {
                "policy-space": "ocp410bftest",
                "name": "aci-containers-ocp410bftest|aci-containers-system"
            },
            "kube-system": {
                "policy-space": "ocp410bftest",
                "name": "aci-containers-ocp410bftest|aci-containers-system"
            },
            "openshift-authentication": {
                "policy-space": "ocp410bftest",
                "name": "aci-containers-ocp410bftest|aci-containers-system"
            },
            "openshift-authentication-operator": {
                "policy-space": "ocp410bftest",
                "name": "aci-containers-ocp410bftest|aci-containers-system"
            },
            "openshift-console": {
                "policy-space": "ocp410bftest",
                "name": "aci-containers-ocp410bftest|aci-containers-system"
            },
            "openshift-dns": {
                "policy-space": "ocp410bftest",
                "name": "aci-containers-ocp410bftest|aci-containers-system"
            },
            "openshift-monitoring": {
                "policy-space": "ocp410bftest",
                "name": "aci-containers-ocp410bftest|aci-containers-system"
            },
            "openshift-web-console": {
                "policy-space": "ocp410bftest",
                "name": "aci-containers-ocp410bftest|aci-containers-system"
            }        },
        "enable-drop-log": true,
        "enable-nodepodif": false,
        "enable-ovs-hw-offload": false
    }
  opflex-agent-config: |-
    {
        "log": {
            "level": "debug"
        },
        "opflex": {
            "notif" : { "enabled" : "false" }
        },
        "prometheus": {
            "enabled": "false"
        }
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: snat-operator-config
  namespace: aci-containers-system
  labels:
    aci-containers-config-version: "65a61686-a03e-4105-adfd-8a59a3aeb800"
    network-plugin: aci-containers
data:
    "start": "5000"
    "end": "65000"
    "ports-per-node": "3000"
---
apiVersion: v1
kind: Secret
metadata:
  name: aci-user-cert
  namespace: aci-containers-system
  labels:
    aci-containers-config-version: "65a61686-a03e-4105-adfd-8a59a3aeb800"
data:
  user.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUNkZ0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQW1Bd2dnSmNBZ0VBQW9HQkFLeGVRRFRyc2ZzNnJSc0IKTWFYQVg0NVZvZm8yTmFsRVVwcS9YT0tzOVJjeURBMDhLNzd6MG8zVDlSMUVxMFJ3NWlpelZLWnQvaUxRcmxrNgpMcVAwT1dvd3dxaVp6RmtFK0RHaEdhSThWK1ZBNTNDcldMcEM4T1ZpRk5qd1Y4SFFNVmQ1TFBwdXJnNExsMEVnCnA5d2k2dERkRTlZN0lmdVo2N0NZWEdBUitoQTdBZ01CQUFFQ2dZQTlCS0IyRzNuR0ZkOXh6OXBqY3RaZzdLK0sKZytZN0paU1ljMlhPV0t2cXFpemFBcEw1NWhhRFhxVkcxeWhKOGkySCt2UGNkdE9nUDM5NDFyL3NDbWpJT2JQZApBNHNIazdiQkhDdVpGVngwViszUll3ZnErbVJCTDFzK211RVFCN3dOS1VxMk1lVGJ0ZkkxNXRZaFlQaXNoRG9rCkQ4ZmhReE0wWWVUOGNtVEpBUUpCQU4vYWJLRVBqUldFZE5SUGRkTWl0bjBjMmZWZXQzWVhEME5KK0RtUzRKV3YKN083eDlidmdqYXFFY3Mxc05kdEQwVEdFZVdsTVVZeExBRWExRzNCWXNWY0NRUURGSHhGWFI4dnpBR1ZmNU1aYQpmaXNDUkU1OTZET0F3LzRvWFoxaFVscVpXMmRObGgvc3hDdXhFd2RBWXNEY1grQkhOSVlGOWxDWTRMSGFCa1Z1CnhSVzlBa0VBMi9TNEFKcFRPdTFvRHFYMVZIMHJhMHhLTG52Zk1UMy9WVkw5Z1RUOVVKZ0k2OUQ4Y0p0NUdEQUUKeml5aHpzMllaRnVUSVJCSW9OMmhhOWpSR1ZkTkNRSkFSdVMvaGRacWdVQzVOTjNBZ0xjem5LTVlYNnZ0S2ZoVApKZzFWRnJWWnBDSDlheWY4MzFoR0ptOGpnb0tCdmtBMUZ5Ykt0TVk3Z2wvOVZ0NCtobklYT1FKQWUyaVRyNHFWCkVsY0hPWWl1WFA5YXMrNUpwanVHcWNWRDZFeXJWRG9XREdrekdCMWpjQzZNRlVCai9SRHBuQnZISm1oVWtXTTgKbFlqMU5jTVVoUjZoNlE9PQotLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tCg==
  user.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUI4akNDQVZzQ0FnUG9NQTBHQ1NxR1NJYjNEUUVCQlFVQU1FRXhDekFKQmdOVkJBWVRBbFZUTVJZd0ZBWUQKVlFRS0RBMURhWE5qYnlCVGVYTjBaVzF6TVJvd0dBWURWUVFEREJGVmMyVnlJRzlqY0RReE1HSm1kR1Z6ZERBZQpGdzB5TWpFeE1ETXdOek0wTkROYUZ3MHpNakV3TXpFeE9UTTBORE5hTUVFeEN6QUpCZ05WQkFZVEFsVlRNUll3CkZBWURWUVFLREExRGFYTmpieUJUZVhOMFpXMXpNUm93R0FZRFZRUUREQkZWYzJWeUlHOWpjRFF4TUdKbWRHVnoKZERDQm56QU5CZ2txaGtpRzl3MEJBUUVGQUFPQmpRQXdnWWtDZ1lFQXJGNUFOT3V4K3pxdEd3RXhwY0JmamxXaAoralkxcVVSU21yOWM0cXoxRnpJTURUd3J2dlBTamRQMUhVU3JSSERtS0xOVXBtMytJdEN1V1RvdW8vUTVhakRDCnFKbk1XUVQ0TWFFWm9qeFg1VURuY0t0WXVrTHc1V0lVMlBCWHdkQXhWM2tzK202dURndVhRU0NuM0NMcTBOMFQKMWpzaCs1bnJzSmhjWUJINkVEc0NBd0VBQVRBTkJna3Foa2lHOXcwQkFRVUZBQU9CZ1FCOUpPakE5Ky9saTBUKwpBek1xS3pFRUx1UENnbS9OQlNzOE9ZYWdtcThUTGNSSUxPWENBNDExZVB6UUpHU2RpZGFxcVNhalR5SzZEaTdTCllDRm5FNHB3MGV5WTJMbm5BckV4YzFpbFFSajVTdElPeU1xL25NaW9JSU94VEN3S21jZXl5aHVNb3RpbndXSzYKb0oxKzRGbFFqL2lNdWNxMGRWQjByWXRrTXVMS01nPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: aci-containers-controller
  namespace: aci-containers-system
  labels:
    aci-containers-config-version: "65a61686-a03e-4105-adfd-8a59a3aeb800"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: aci-containers-host-agent
  namespace: aci-containers-system
  labels:
    aci-containers-config-version: "65a61686-a03e-4105-adfd-8a59a3aeb800"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    aci-containers-config-version: "65a61686-a03e-4105-adfd-8a59a3aeb800"
    network-plugin: aci-containers
  name: aci-containers:controller
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  - namespaces
  - pods
  - endpoints
  - services
  - events
  - replicationcontrollers
  - serviceaccounts
  verbs:
  - list
  - watch
  - get
  - patch
  - create
  - update
  - delete
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - list
  - watch
  - get
  - create
  - update
  - delete
- apiGroups:
  - "apiextensions.k8s.io"
  resources:
  - customresourcedefinitions
  verbs:
  - '*'
- apiGroups:
  - "rbac.authorization.k8s.io"
  resources:
  - clusterroles
  - clusterrolebindings
  verbs:
  - '*'
- apiGroups:
  - "networking.k8s.io"
  resources:
  - networkpolicies
  verbs:
  - list
  - watch
  - get
- apiGroups:
  - "apps"
  resources:
  - deployments
  - replicasets
  - daemonsets
  - statefulsets
  verbs:
  - '*'
- apiGroups:
  - ""
  resources:
  - nodes
  - services/status
  verbs:
  - update
- apiGroups:
  - "monitoring.coreos.com"
  resources:
  - servicemonitors
  verbs:
  - get
  - create
- apiGroups:
  - "aci.snat"
  resources:
  - snatpolicies/finalizers
  - snatpolicies/status
  - nodeinfos
  verbs:
  - update
  - create
  - list
  - watch
  - get
  - delete
- apiGroups:
  - "aci.snat"
  resources:
  - snatglobalinfos
  - snatpolicies
  - nodeinfos
  - rdconfigs
  verbs:
  - list
  - watch
  - get
  - create
  - update
  - delete
- apiGroups:
  - "aci.qos"
  resources:
  - qospolicies
  verbs:
  - list
  - watch
  - get
  - create
  - update
  - delete
  - patch
- apiGroups:
  - "aci.netflow"
  resources:
  - netflowpolicies
  verbs:
  - list
  - watch
  - get
  - update
- apiGroups:
  - "aci.erspan"
  resources:
  - erspanpolicies
  verbs:
  - list
  - watch
  - get
  - update
- apiGroups:
  - "aci.aw"
  resources:
  - nodepodifs
  verbs:
  - '*'
- apiGroups:
  - apps.openshift.io
  resources:
  - deploymentconfigs
  verbs:
  - list
  - watch
  - get
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - "aci.netpol"
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - delete
- apiGroups:
  - "aci.dnsnetpol"
  resources:
  - dnsnetworkpolicies
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - delete
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    aci-containers-config-version: "65a61686-a03e-4105-adfd-8a59a3aeb800"
    network-plugin: aci-containers
  name: aci-containers:host-agent
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  - namespaces
  - pods
  - endpoints
  - services
  - replicationcontrollers
  verbs:
  - list
  - watch
  - get
  - update
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
- apiGroups:
  - "apiextensions.k8s.io"
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
  - get
- apiGroups:
  - "networking.k8s.io"
  resources:
  - networkpolicies
  verbs:
  - list
  - watch
  - get
- apiGroups:
  - "apps"
  resources:
  - deployments
  - replicasets
  verbs:
  - list
  - watch
  - get
- apiGroups:
  - "aci.snat"
  resources:
  - snatpolicies
  - snatglobalinfos
  - rdconfigs
  verbs:
  - list
  - watch
  - get
- apiGroups:
  - "aci.qos"
  resources:
  - qospolicies
  verbs:
  - list
  - watch
  - get
  - create
  - update
  - delete
  - patch
- apiGroups:
  - "aci.droplog"
  resources:
  - enabledroplogs
  - prunedroplogs
  verbs:
  - list
  - watch
  - get
- apiGroups:
  - "aci.snat"
  resources:
  - nodeinfos
  - snatlocalinfos
  verbs:
  - create
  - update
  - list
  - watch
  - get
  - delete
- apiGroups:
  - "config.openshift.io"
  resources:
  - infrastructures
  verbs:
  - get
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - "aci.netpol"
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - "aci.aw"
  resources:
  - nodepodifs
  verbs:
  - "*"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: aci-containers:controller
  labels:
    aci-containers-config-version: "65a61686-a03e-4105-adfd-8a59a3aeb800"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: aci-containers:controller
subjects:
- kind: ServiceAccount
  name: aci-containers-controller
  namespace: aci-containers-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: aci-containers:host-agent
  labels:
    aci-containers-config-version: "65a61686-a03e-4105-adfd-8a59a3aeb800"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: aci-containers:host-agent
subjects:
- kind: ServiceAccount
  name: aci-containers-host-agent
  namespace: aci-containers-system
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: aci-containers-host
  namespace: aci-containers-system
  labels:
    aci-containers-config-version: "65a61686-a03e-4105-adfd-8a59a3aeb800"
    network-plugin: aci-containers
spec:
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      name: aci-containers-host
      network-plugin: aci-containers
  template:
    metadata:
      labels:
        name: aci-containers-host
        network-plugin: aci-containers
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
    spec:
      hostNetwork: true
      hostPID: true
      hostIPC: true
      serviceAccountName: aci-containers-host-agent
      imagePullSecrets:
        - name: 'noiro-docker-registry-secret'
      tolerations:
        - operator: Exists
      initContainers:
        - name: cnideploy
          image: quay.io/noirolabs/cnideploy:5.2.3.4.1d150da
          imagePullPolicy: Always
          securityContext:
            privileged: true
            capabilities:
              add:
                - SYS_ADMIN
          volumeMounts:
            - name: cni-bin
              mountPath: /mnt/cni-bin
      priorityClassName: acicni-priority
      containers:
        - name: aci-containers-host
          image: quay.io/noirolabs/aci-containers-host:5.2.3.4.1d150da
          imagePullPolicy: Always
          securityContext:
            privileged: true
            capabilities:
              add:
                - SYS_ADMIN
                - NET_ADMIN
                - SYS_PTRACE
                - NET_RAW
          env:
            - name: GOTRACEBACK
              value: "2"
            - name: KUBERNETES_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: TENANT
              value: "ocp410bftest"
            - name: NODE_EPG
              value: "aci-containers-ocp410bftest|aci-containers-nodes"
            - name: DURATION_WAIT_FOR_NETWORK
              value: "210"
          volumeMounts:
            - name: cni-bin
              mountPath: /mnt/cni-bin
            - name: cni-conf
              mountPath: /mnt/cni-conf
            - name: hostvar
              mountPath: /usr/local/var
            - name: hostrun
              mountPath: /run
            - name: hostrun
              mountPath: /usr/local/run
            - name: opflex-hostconfig-volume
              mountPath: /usr/local/etc/opflex-agent-ovs/base-conf.d
            - name: host-config-volume
              mountPath: /usr/local/etc/aci-containers/
            - mountPath: /run/netns
              name: host-run-netns
              readOnly: true
              mountPropagation: HostToContainer
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /status
              port: 8090
              scheme: HTTP
            initialDelaySeconds: 120
            periodSeconds: 60
            successThreshold: 1
            timeoutSeconds: 30
        - name: opflex-agent
          env:
            - name: REBOOT_WITH_OVS
              value: "true"
          image: quay.io/noirolabs/opflex:5.2.3.4.1d150da
          imagePullPolicy: Always
          securityContext:
            privileged: true
            capabilities:
              add:
                - NET_ADMIN
          volumeMounts:
            - name: hostvar
              mountPath: /usr/local/var
            - name: hostrun
              mountPath: /run
            - name: hostrun
              mountPath: /usr/local/run
            - name: opflex-hostconfig-volume
              mountPath: /usr/local/etc/opflex-agent-ovs/base-conf.d
            - name: opflex-config-volume
              mountPath: /usr/local/etc/opflex-agent-ovs/conf.d
        - name: mcast-daemon
          image: quay.io/noirolabs/opflex:5.2.3.4.1d150da
          command: ["/bin/sh"]
          args: ["/usr/local/bin/launch-mcastdaemon.sh"]
          imagePullPolicy: Always
          securityContext:
            privileged: true
          volumeMounts:
            - name: hostvar
              mountPath: /usr/local/var
            - name: hostrun
              mountPath: /run
            - name: hostrun
              mountPath: /usr/local/run
      restartPolicy: Always
      volumes:
        - name: cni-bin
          hostPath:
            path: /var/lib
        - name: cni-conf
          hostPath:
            path: /etc/kubernetes
        - name: hostvar
          hostPath:
            path: /var
        - name: hostrun
          hostPath:
            path: /run
        - name: host-config-volume
          configMap:
            name: aci-containers-config
            items:
              - key: host-agent-config
                path: host-agent.conf
        - name: opflex-hostconfig-volume
          emptyDir:
            medium: Memory
        - name: opflex-config-volume
          configMap:
            name: aci-containers-config
            items:
              - key: opflex-agent-config
                path: local.conf
        - name: host-run-netns
          hostPath:
            path: /run/netns
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: aci-containers-openvswitch
  namespace: aci-containers-system
  labels:
    aci-containers-config-version: "65a61686-a03e-4105-adfd-8a59a3aeb800"
    network-plugin: aci-containers
spec:
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      name: aci-containers-openvswitch
      network-plugin: aci-containers
  template:
    metadata:
      labels:
        name: aci-containers-openvswitch
        network-plugin: aci-containers
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
    spec:
      hostNetwork: true
      hostPID: true
      hostIPC: true
      serviceAccountName: aci-containers-host-agent
      imagePullSecrets:
        - name: 'noiro-docker-registry-secret'
      tolerations:
        - operator: Exists
      priorityClassName: acicni-priority
      containers:
        - name: aci-containers-openvswitch
          image: quay.io/noirolabs/openvswitch:5.2.3.4.1d150da
          imagePullPolicy: Always
          resources:
            limits:
              memory: "1Gi"
          securityContext:
            privileged: true
            capabilities:
              add:
                - NET_ADMIN
                - SYS_MODULE
                - SYS_NICE
                - IPC_LOCK
          env:
            - name: OVS_RUNDIR
              value: /usr/local/var/run/openvswitch
          volumeMounts:
            - name: hostvar
              mountPath: /usr/local/var
            - name: hostrun
              mountPath: /run
            - name: hostrun
              mountPath: /usr/local/run
            - name: hostetc
              mountPath: /usr/local/etc
            - name: hostmodules
              mountPath: /lib/modules
          livenessProbe:
            exec:
              command:
                - /usr/local/bin/liveness-ovs.sh
      restartPolicy: Always
      volumes:
        - name: hostetc
          hostPath:
            path: /etc
        - name: hostvar
          hostPath:
            path: /var
        - name: hostrun
          hostPath:
            path: /run
        - name: hostmodules
          hostPath:
            path: /lib/modules
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: aci-containers-controller
  namespace: aci-containers-system
  labels:
    aci-containers-config-version: "65a61686-a03e-4105-adfd-8a59a3aeb800"
    network-plugin: aci-containers
    name: aci-containers-controller
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      name: aci-containers-controller
      network-plugin: aci-containers
  template:
    metadata:
      name: aci-containers-controller
      namespace: aci-containers-system
      labels:
        name: aci-containers-controller
        network-plugin: aci-containers
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
    spec:
      hostNetwork: true
      serviceAccountName: aci-containers-controller
      imagePullSecrets:
        - name: 'noiro-docker-registry-secret'
      tolerations:
        - effect: NoExecute
          operator: Exists
          tolerationSeconds: 60
        - effect: NoSchedule
          key: node.kubernetes.io/not-ready
          operator: Exists
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
          operator: Exists
      priorityClassName: acicni-priority
      containers:
        - name: aci-containers-controller
          image: quay.io/noirolabs/aci-containers-controller:5.2.3.4.1d150da
          imagePullPolicy: Always
          env:
            - name: WATCH_NAMESPACE
              value: ""
            - name: ACI_SNAT_NAMESPACE
              value: "aci-containers-system"
            - name: ACI_SNAGLOBALINFO_NAME
              value: "snatglobalinfo"
            - name: ACI_RDCONFIG_NAME
              value: "routingdomain-config"
            - name: SYSTEM_NAMESPACE
              value: "aci-containers-system"
          volumeMounts:
            - name: controller-config-volume
              mountPath: /usr/local/etc/aci-containers/
            - name: aci-user-cert-volume
              mountPath: /usr/local/etc/aci-cert/
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /status
              port: 8091
              scheme: HTTP
            initialDelaySeconds: 120
            periodSeconds: 60
            successThreshold: 1
            timeoutSeconds: 30
      volumes:
        - name: aci-user-cert-volume
          secret:
            secretName: aci-user-cert
        - name: controller-config-volume
          configMap:
            name: aci-containers-config
            items:
              - key: controller-config
                path: controller.conf
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: aci-containers-operator
  namespace: aci-containers-system
  labels:
    aci-containers-config-version: "65a61686-a03e-4105-adfd-8a59a3aeb800"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    aci-containers-config-version: "65a61686-a03e-4105-adfd-8a59a3aeb800"
    network-plugin: aci-containers
  name: aci-containers-operator
rules:
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - '*'
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - clusterroles
  - clusterrolebindings
  verbs:
  - '*'
- apiGroups:
  - ''
  resources:
  - nodes
  - namespaces
  - configmaps
  - secrets
  - pods
  - services
  - serviceaccounts
  - serviceaccounts/token
  - endpoints
  - events
  verbs:
  - '*'
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - list
  - watch
  - get
- apiGroups:
  - "monitoring.coreos.com"
  resources:
  - servicemonitors
  verbs:
  - get
  - create
- apiGroups:
  - apps
  resources:
  - deployments
  - replicasets
  - daemonsets
  - statefulsets
  verbs:
  - '*'
- apiGroups:
  - aci.ctrl
  resources:
  - acicontainersoperators
  - acicontainersoperators/status
  - acicontainersoperators/finalizers
  verbs:
  - '*'
- apiGroups:
  - aci.ctrl
  resources:
  - accprovisioninputs
  - accprovisioninputs/status
  - accprovisioninputs/finalizers
  verbs:
  - '*'
- apiGroups:
  - scheduling.k8s.io
  resources:
  - '*'
  verbs:
  - '*'
- apiGroups:
  - aci.snat
  resources:
  - snatpolicies
  - snatglobalinfos
  - rdconfigs
  verbs:
  - list
  - watch
  - get
- apiGroups:
  - aci.snat
  resources:
  - nodeinfos
  verbs:
  - create
  - update
  - list
  - watch
  - get
- apiGroups:
  - config.openshift.io
  - operator.openshift.io
  resources:
  - '*'
  verbs:
  - '*'
- apiGroups:
  - route.openshift.io
  resources:
  - routes
  verbs:
  - create
  - update
  - list
  - watch
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: aci-containers-operator
  labels:
    aci-containers-config-version: "65a61686-a03e-4105-adfd-8a59a3aeb800"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: aci-containers-operator
subjects:
- kind: ServiceAccount
  name: aci-containers-operator
  namespace: aci-containers-system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: aci-containers-operator
  namespace: aci-containers-system
  labels:
    aci-containers-config-version: "65a61686-a03e-4105-adfd-8a59a3aeb800"
    name: aci-containers-operator
    network-plugin: aci-containers
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      name: aci-containers-operator
      network-plugin: aci-containers
  strategy:
    type: Recreate
  template:
    metadata:
      name: aci-containers-operator
      namespace: aci-containers-system
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ""
      labels:
        name: aci-containers-operator
        network-plugin: aci-containers
    spec:
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - preference:
              matchExpressions:
              - key: preferred-node
                operator: In
                values:
                - aci-containers-operator-2577247291
            weight: 1
      containers:
      - image: quay.io/noirolabs/aci-containers-operator:5.2.3.4.1d150da
        imagePullPolicy: Always
        name: aci-containers-operator
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - name: aci-operator-config
          mountPath: /usr/local/etc/aci-containers/
        - name: acc-provision-config
          mountPath: /usr/local/etc/acc-provision/
        env:
        - name: SYSTEM_NAMESPACE
          value: "aci-containers-system"
        - name: ACC_PROVISION_FLAVOR
          value: "openshift-4.10-esx"
      - env:
        - name: ANSIBLE_GATHERING
          value: explicit
        - name: WATCH_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: ACC_PROVISION_FLAVOR
          value: "openshift-4.10-esx"
        - name: ACC_PROVISION_INPUT_CR_NAME
          value: "accprovisioninput"
        image: quay.io/noirolabs/acc-provision-operator:5.2.3.4.1d150da
        imagePullPolicy: Always
        name: acc-provision-operator
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      hostNetwork: true
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccount: aci-containers-operator
      serviceAccountName: aci-containers-operator
      terminationGracePeriodSeconds: 30
      tolerations:
      - effect: NoSchedule
        operator: Exists
      volumes:
      - name: aci-operator-config
        configMap:
          name: aci-operator-config
          items:
            - key: spec
              path: aci-operator.conf
      - name: acc-provision-config
        configMap:
          name: acc-provision-config
          items:
            - key: spec
              path: acc-provision-operator.conf


